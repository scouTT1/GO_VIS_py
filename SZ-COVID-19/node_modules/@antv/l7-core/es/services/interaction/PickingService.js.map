{"version":3,"sources":["../../../src/services/interaction/PickingService.ts"],"names":["decodePickingColor","inject","injectable","TYPES","InteractionEvent","gl","PickingService","IRendererService","IGlobalConfigService","IInteractionService","ILayerService","pickingFBO","width","height","alreadyInPicking","pickBufferScale","pickFromPickingFBO","layer","x","y","lngLat","type","isPicked","rendererService","getViewportSize","readPixels","getLayerConfig","enableHighlight","enableSelect","xInDevicePixel","window","devicePixelRatio","yInDevicePixel","pickedColors","Math","floor","data","Uint8Array","framebuffer","pickedFeatureIdx","rawFeature","getSource","getFeatureById","getCurrentPickId","target","featureId","feature","setCurrentPickId","triggerHoverOnLayer","highlightPickedFeature","toString","selectedId","getCurrentSelectedId","selectFeature","setCurrentSelectedId","id","createTexture2D","createFramebuffer","configService","getSceneConfig","color","round","wrapS","CLAMP_TO_EDGE","wrapT","interactionService","on","Hover","pickingAllLayer","bind","layerService","alreadyInRendering","pickingLayers","renderLayers","useFramebuffer","clear","resize","layers","getLayers","filter","needPick","reverse","some","stencil","depth","hooks","beforePickingEncode","call","renderModels","afterPickingEncode","enablePropagation","emit","r","g","b","beforeHighlight","beforeSelect"],"mappings":"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","sourcesContent":["import { decodePickingColor, encodePickingColor } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport {\n  IMapService,\n  IRendererService,\n  IShaderModuleService,\n} from '../../index';\nimport { TYPES } from '../../types';\nimport { IGlobalConfigService, ISceneConfig } from '../config/IConfigService';\nimport {\n  IInteractionService,\n  IInteractionTarget,\n  InteractionEvent,\n} from '../interaction/IInteractionService';\nimport { ILayer, ILayerService } from '../layer/ILayerService';\nimport { ILngLat } from '../map/IMapService';\nimport { gl } from '../renderer/gl';\nimport { IFramebuffer } from '../renderer/IFramebuffer';\nimport { IPickingService } from './IPickingService';\n\n@injectable()\nexport default class PickingService implements IPickingService {\n  @inject(TYPES.IRendererService)\n  private rendererService: IRendererService;\n\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  @inject(TYPES.IInteractionService)\n  private interactionService: IInteractionService;\n\n  @inject(TYPES.ILayerService)\n  private layerService: ILayerService;\n  private pickingFBO: IFramebuffer;\n\n  private width: number = 0;\n\n  private height: number = 0;\n\n  private alreadyInPicking: boolean = false;\n\n  private pickBufferScale: number = 1.0;\n\n  public init(id: string) {\n    const {\n      createTexture2D,\n      createFramebuffer,\n      getViewportSize,\n    } = this.rendererService;\n    const { width, height } = getViewportSize();\n    this.pickBufferScale =\n      this.configService.getSceneConfig(id).pickBufferScale || 1;\n    // 创建 picking framebuffer，后续实时 resize\n    this.pickingFBO = createFramebuffer({\n      color: createTexture2D({\n        width: Math.round(width / this.pickBufferScale),\n        height: Math.round(height / this.pickBufferScale),\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      }),\n    });\n\n    // 监听 hover 事件\n    this.interactionService.on(\n      InteractionEvent.Hover,\n      this.pickingAllLayer.bind(this),\n    );\n  }\n  private async pickingAllLayer(target: IInteractionTarget) {\n    if (this.alreadyInPicking || this.layerService.alreadyInRendering) {\n      return;\n    }\n    this.alreadyInPicking = true;\n    await this.pickingLayers(target);\n    this.layerService.renderLayers();\n    this.alreadyInPicking = false;\n  }\n  private async pickingLayers(target: IInteractionTarget) {\n    const { getViewportSize, useFramebuffer, clear } = this.rendererService;\n    const { width, height } = getViewportSize();\n\n    if (this.width !== width || this.height !== height) {\n      this.pickingFBO.resize({\n        width: Math.round(width / this.pickBufferScale),\n        height: Math.round(height / this.pickBufferScale),\n      });\n      this.width = width;\n      this.height = height;\n    }\n\n    useFramebuffer(this.pickingFBO, () => {\n      const layers = this.layerService.getLayers();\n      layers\n        .filter((layer) => layer.needPick(target.type))\n        .reverse()\n        .some((layer) => {\n          clear({\n            framebuffer: this.pickingFBO,\n            color: [0, 0, 0, 0],\n            stencil: 0,\n            depth: 1,\n          });\n          layer.hooks.beforePickingEncode.call();\n          layer.renderModels();\n          layer.hooks.afterPickingEncode.call();\n          const isPicked = this.pickFromPickingFBO(layer, target);\n          return isPicked && !layer.getLayerConfig().enablePropagation;\n        });\n    });\n  }\n  private pickFromPickingFBO = (\n    layer: ILayer,\n    { x, y, lngLat, type }: IInteractionTarget,\n  ) => {\n    let isPicked = false;\n    const { getViewportSize, readPixels } = this.rendererService;\n    const { width, height } = getViewportSize();\n    const { enableHighlight, enableSelect } = layer.getLayerConfig();\n\n    const xInDevicePixel = x * window.devicePixelRatio;\n    const yInDevicePixel = y * window.devicePixelRatio;\n    if (\n      xInDevicePixel > width - 1 * window.devicePixelRatio ||\n      xInDevicePixel < 0 ||\n      yInDevicePixel > height - 1 * window.devicePixelRatio ||\n      yInDevicePixel < 0\n    ) {\n      return false;\n    }\n    let pickedColors: Uint8Array | undefined;\n    pickedColors = readPixels({\n      x: Math.floor(xInDevicePixel / this.pickBufferScale),\n      // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n      y: Math.floor(\n        (height - (y + 1) * window.devicePixelRatio) / this.pickBufferScale,\n      ),\n      width: 1,\n      height: 1,\n      data: new Uint8Array(1 * 1 * 4),\n      framebuffer: this.pickingFBO,\n    });\n    if (\n      pickedColors[0] !== 0 ||\n      pickedColors[1] !== 0 ||\n      pickedColors[2] !== 0\n    ) {\n      const pickedFeatureIdx = decodePickingColor(pickedColors);\n      const rawFeature = layer.getSource().getFeatureById(pickedFeatureIdx);\n      if (\n        pickedFeatureIdx !== layer.getCurrentPickId() &&\n        type === 'mousemove'\n      ) {\n        type = 'mouseenter';\n      }\n\n      const target = {\n        x,\n        y,\n        type,\n        lngLat,\n        featureId: pickedFeatureIdx,\n        feature: rawFeature,\n      };\n      if (!rawFeature) {\n        // this.logger.error(\n        //   '未找到颜色编码解码后的原始 feature，请检查 fragment shader 中末尾是否添加了 `gl_FragColor = filterColor(gl_FragColor);`',\n        // );\n      } else {\n        // trigger onHover/Click callback on layer\n        isPicked = true;\n        layer.setCurrentPickId(pickedFeatureIdx);\n        this.triggerHoverOnLayer(layer, target); // 触发拾取事件\n      }\n    } else {\n      // 未选中\n      const target = {\n        x,\n        y,\n        lngLat,\n        type:\n          layer.getCurrentPickId() !== null && type === 'mousemove'\n            ? 'mouseout'\n            : 'un' + type,\n        featureId: null,\n        feature: null,\n      };\n      this.triggerHoverOnLayer(layer, {\n        ...target,\n        type: 'unpick',\n      });\n      this.triggerHoverOnLayer(layer, target);\n      layer.setCurrentPickId(null);\n    }\n\n    if (enableHighlight) {\n      this.highlightPickedFeature(layer, pickedColors);\n    }\n    if (\n      enableSelect &&\n      type === 'click' &&\n      pickedColors?.toString() !== [0, 0, 0, 0].toString()\n    ) {\n      const selectedId = decodePickingColor(pickedColors);\n      if (\n        layer.getCurrentSelectedId() === null ||\n        selectedId !== layer.getCurrentSelectedId()\n      ) {\n        this.selectFeature(layer, pickedColors);\n        layer.setCurrentSelectedId(selectedId);\n      } else {\n        this.selectFeature(layer, new Uint8Array([0, 0, 0, 0])); // toggle select\n        layer.setCurrentSelectedId(null);\n      }\n    }\n    return isPicked;\n  };\n  private triggerHoverOnLayer(\n    layer: ILayer,\n    target: {\n      x: number;\n      y: number;\n      type: string;\n      lngLat: ILngLat;\n      feature: unknown;\n      featureId: number | null;\n    },\n  ) {\n    layer.emit(target.type, target);\n  }\n\n  /**\n   * highlight 如果直接修改选中 feature 的 buffer，存在两个问题：\n   * 1. 鼠标移走时无法恢复\n   * 2. 无法实现高亮颜色与原始原色的 alpha 混合\n   * 因此高亮还是放在 shader 中做比较好\n   * @example\n   * this.layer.color('name', ['#000000'], {\n   *  featureRange: {\n   *    startIndex: pickedFeatureIdx,\n   *    endIndex: pickedFeatureIdx + 1,\n   *  },\n   * });\n   */\n  private highlightPickedFeature(\n    layer: ILayer,\n    pickedColors: Uint8Array | undefined,\n  ) {\n    const [r, g, b] = pickedColors;\n    layer.hooks.beforeHighlight.call([r, g, b]);\n  }\n\n  private selectFeature(layer: ILayer, pickedColors: Uint8Array | undefined) {\n    const [r, g, b] = pickedColors;\n    layer.hooks.beforeSelect.call([r, g, b]);\n  }\n}\n"],"file":"PickingService.js"}