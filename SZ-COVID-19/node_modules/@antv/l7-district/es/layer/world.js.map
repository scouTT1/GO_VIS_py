{"version":3,"sources":["../../src/layer/world.ts"],"names":["LineLayer","getDataConfig","BaseLayer","WorldLayer","scene","option","loadData","then","fillData","lineData","fillLabel","addFillLayer","addFillLine","options","label","enable","addLabelLayer","data","bord1","features","filter","feature","properties","type","bordFc","nationalBorder","nationalFc","addNationBorder","countryConfig","geoDataLevel","world","fetchData","fill","line","map","center","x","y","boundaries","boundaries2","nationalStroke","nationalWidth","coastlineStroke","chinaNationalStroke","chinaNationalWidth","coastlineWidth","zIndex","lineLayer","source","size","v","color","lineLayer2","shape","style","lineType","dashArray","addLayer","layers","push"],"mappings":"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","sourcesContent":["import {\n  ILayer,\n  LineLayer,\n  PointLayer,\n  PolygonLayer,\n  Scene,\n  StyleAttrField,\n} from '@antv/l7';\nimport { getDataConfig } from '../';\nimport BaseLayer from './baseLayer';\nimport { IDistrictLayerOption } from './interface';\nexport default class WorldLayer extends BaseLayer {\n  constructor(scene: Scene, option: Partial<IDistrictLayerOption> = {}) {\n    super(scene, option);\n    this.loadData().then(([fillData, lineData, fillLabel]) => {\n      this.addFillLayer(fillData);\n      this.addFillLine(lineData);\n      if (this.options.label?.enable) {\n        this.addLabelLayer(fillLabel, 'json');\n      }\n    });\n  }\n\n  public addFillLine(data: any) {\n    // 未定国界\n    const bord1 = data.features.filter((feature: any) => {\n      return (\n        feature.properties.type === '10' ||\n        feature.properties.type === '1' ||\n        feature.properties.type === '11' ||\n        feature.properties.type === '8'\n      );\n    });\n    const bordFc = {\n      type: 'FeatureCollection',\n      features: bord1,\n    };\n    // 已确定国界\n    const nationalBorder = data.features.filter((feature: any) => {\n      return (\n        feature.properties.type !== '10' &&\n        feature.properties.type !== '1' &&\n        feature.properties.type !== '11' &&\n        feature.properties.type !== '8'\n      );\n    });\n    const nationalFc = {\n      type: 'FeatureCollection',\n      features: nationalBorder,\n    };\n    this.addNationBorder(nationalFc, bordFc);\n  }\n\n  private async loadData() {\n    const countryConfig = getDataConfig(this.options.geoDataLevel).world;\n\n    const fillData = await this.fetchData(countryConfig.fill);\n    const lineData = await this.fetchData(countryConfig.line);\n    // const fillLabel = await this.fetchData(countryConfig.label);\n    const fillLabel = fillData.features.map((feature: any) => {\n      return {\n        ...feature.properties,\n        center: [feature.properties.x, feature.properties.y],\n      };\n    });\n    return [fillData, lineData, fillLabel];\n  }\n  private addNationBorder(boundaries: any, boundaries2: any) {\n    const {\n      nationalStroke,\n      nationalWidth,\n      coastlineStroke,\n      chinaNationalStroke,\n      chinaNationalWidth,\n      coastlineWidth,\n      zIndex,\n    } = this.options;\n    // 添加国界线\n    const lineLayer = new LineLayer({\n      zIndex: zIndex + 0.1,\n    })\n      .source(boundaries)\n      // .size(0.6)\n      .size('type', (v: string) => {\n        if (v === '0') {\n          return chinaNationalWidth; // 中国国界线\n        } else if (v === '2' || v === '9') {\n          return coastlineWidth; // 中国海岸线\n        } else if (v === '7') {\n          return nationalWidth; // 国外国界\n        } else {\n          return nationalWidth;\n        }\n      })\n      .color('type', (v: string) => {\n        if (v === '0') {\n          return chinaNationalStroke; // 中国国界线\n        } else if (v === '2' || v === '9') {\n          return coastlineStroke; // 中国海岸线\n        } else if (v === '7') {\n          return nationalStroke; // 国外国界\n        } else {\n          return nationalStroke;\n        }\n      });\n    // 添加未定国界\n    const lineLayer2 = new LineLayer({\n      zIndex: zIndex + 0.1,\n    })\n      .source(boundaries2)\n      .size('type', (v: string) => {\n        if (v === '1') {\n          return chinaNationalWidth;\n        } else {\n          return nationalWidth;\n        }\n      })\n      .shape('line')\n      .color('type', (v: string) => {\n        if (v === '1') {\n          return chinaNationalStroke;\n        } else {\n          return nationalStroke;\n        }\n      })\n      .style({\n        lineType: 'dash',\n        dashArray: [2, 2],\n      });\n\n    this.scene.addLayer(lineLayer);\n    this.scene.addLayer(lineLayer2);\n\n    this.layers.push(lineLayer, lineLayer2);\n  }\n}\n"],"file":"world.js"}