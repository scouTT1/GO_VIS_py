import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import { LineLayer, PointLayer, PolygonLayer, Popup } from '@antv/l7';
import { EventEmitter } from 'eventemitter3';
import geobuf from 'geobuf';
import isObject from 'lodash/isObject';
import mergeWith from 'lodash/mergeWith';
import Pbf from 'pbf';
import { setDataLevel } from '../config';

function mergeCustomizer(objValue, srcValue) {
  if (Array.isArray(srcValue)) {
    return srcValue;
  }
}

var BaseLayer = function (_EventEmitter) {
  _inherits(BaseLayer, _EventEmitter);

  var _super = _createSuper(BaseLayer);

  function BaseLayer(scene) {
    var _this;

    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, BaseLayer);

    _this = _super.call(this);
    _this.fillLayer = void 0;
    _this.lineLayer = void 0;
    _this.labelLayer = void 0;
    _this.bubbleLayer = void 0;
    _this.scene = void 0;
    _this.options = void 0;
    _this.layers = [];
    _this.fillData = void 0;
    _this.popup = void 0;
    _this.scene = scene;
    _this.options = mergeWith(_this.getDefaultOption(), option, mergeCustomizer);
    setDataLevel(_this.options.geoDataLevel);
    return _this;
  }

  _createClass(BaseLayer, [{
    key: "destroy",
    value: function destroy() {
      var _this2 = this;

      this.layers.forEach(function (layer) {
        return _this2.scene.removeLayer(layer);
      });
      this.layers.length = 0;
    }
  }, {
    key: "show",
    value: function show() {
      this.layers.forEach(function (layer) {
        return layer.show();
      });
    }
  }, {
    key: "hide",
    value: function hide() {
      this.layers.forEach(function (layer) {
        return layer.hide();
      });
    }
  }, {
    key: "setOption",
    value: function setOption(newOption) {
      this.options = mergeWith(this.options, newOption);
    }
  }, {
    key: "updateData",
    value: function updateData(newData, joinByField) {
      this.setOption({
        data: newData,
        joinBy: joinByField
      });
      var _this$options = this.options,
          _this$options$data = _this$options.data,
          data = _this$options$data === void 0 ? [] : _this$options$data,
          joinBy = _this$options.joinBy;
      this.fillLayer.setData(this.fillData, {
        transforms: data.length === 0 ? [] : [{
          type: 'join',
          sourceField: joinBy[1],
          targetField: joinBy[0],
          data: data
        }]
      });
    }
  }, {
    key: "fetchData",
    value: function () {
      var _fetchData = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data) {
        var buffer, geojson;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(data.type === 'pbf')) {
                  _context.next = 10;
                  break;
                }

                _context.next = 3;
                return fetch(data.url);

              case 3:
                _context.next = 5;
                return _context.sent.arrayBuffer();

              case 5:
                buffer = _context.sent;
                geojson = geobuf.decode(new Pbf(buffer));
                return _context.abrupt("return", geojson);

              case 10:
                if (!isObject(data.url)) {
                  _context.next = 14;
                  break;
                }

                _context.t0 = data.url;
                _context.next = 17;
                break;

              case 14:
                _context.next = 16;
                return fetch(data.url);

              case 16:
                _context.t0 = _context.sent.json();

              case 17:
                return _context.abrupt("return", _context.t0);

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function fetchData(_x) {
        return _fetchData.apply(this, arguments);
      }

      return fetchData;
    }()
  }, {
    key: "getDefaultOption",
    value: function getDefaultOption() {
      return {
        zIndex: 0,
        geoDataLevel: 2,
        depth: 1,
        adcode: [],
        joinBy: ['name', 'name'],
        label: {
          enable: true,
          color: '#000',
          field: 'name',
          size: 8,
          stroke: '#fff',
          strokeWidth: 2,
          textAllowOverlap: true,
          opacity: 1
        },
        bubble: {
          enable: false,
          shape: 'circle',
          color: '#1AA9FF',
          size: 15,
          style: {
            opacity: 1,
            stroke: '#fff',
            strokeWidth: 1
          }
        },
        fill: {
          scale: null,
          color: '#ddd',
          style: {
            opacity: 1.0
          },
          activeColor: 'rgba(0,0,255,0.3)'
        },
        autoFit: true,
        stroke: '#bdbdbd',
        strokeWidth: 0.6,
        cityStroke: '#636363',
        cityStrokeWidth: 0.6,
        countyStrokeWidth: 0.6,
        provinceStrokeWidth: 0.6,
        provinceStroke: '#f0f0f0',
        countyStroke: '#525252',
        coastlineStroke: '#4190da',
        coastlineWidth: 0.6,
        nationalStroke: '#c994c7',
        nationalWidth: 0.5,
        chinaNationalStroke: 'gray',
        chinaNationalWidth: 1,
        popup: {
          enable: true,
          openTriggerEvent: 'mousemove',
          closeTriggerEvent: 'mouseout',
          option: {},
          Html: function Html(properties) {
            return "".concat(properties.name);
          }
        }
      };
    }
  }, {
    key: "addFillLayer",
    value: function addFillLayer(fillCountry) {
      var _this$options$bubble;

      var _this$options2 = this.options,
          popup = _this$options2.popup,
          _this$options2$data = _this$options2.data,
          data = _this$options2$data === void 0 ? [] : _this$options2$data,
          fill = _this$options2.fill,
          autoFit = _this$options2.autoFit,
          joinBy = _this$options2.joinBy;
      this.fillData = fillCountry;
      var fillLayer = new PolygonLayer({
        autoFit: autoFit
      }).source(fillCountry, {
        transforms: data.length === 0 ? [] : [{
          type: 'join',
          sourceField: joinBy[1],
          targetField: joinBy[0],
          data: data
        }]
      });
      this.setLayerAttribute(fillLayer, 'color', fill.color);

      if (fill.scale && isObject(fill.color)) {
        fillLayer.scale('color', {
          type: fill.scale,
          field: fill.color.field
        });
      }

      fillLayer.shape('fill').active({
        color: fill.activeColor
      }).style(fill.style);
      this.fillLayer = fillLayer;
      this.layers.push(fillLayer);
      this.scene.addLayer(fillLayer);

      if (this.options.bubble && ((_this$options$bubble = this.options.bubble) === null || _this$options$bubble === void 0 ? void 0 : _this$options$bubble.enable) !== false) {
        var labeldata = fillCountry.features.map(function (feature) {
          return _objectSpread(_objectSpread({}, feature.properties), {}, {
            center: [feature.properties.x, feature.properties.y]
          });
        });
        this.addBubbleLayer(labeldata);
      }

      if (popup.enable) {
        this.addPopup();
      }

      this.emit('loaded');
    }
  }, {
    key: "addFillLine",
    value: function addFillLine(provinceLine) {
      var _this$options3 = this.options,
          stroke = _this$options3.stroke,
          strokeWidth = _this$options3.strokeWidth,
          zIndex = _this$options3.zIndex;
      var layer2 = new LineLayer({
        zIndex: zIndex + 0.1
      }).source(provinceLine).color(stroke).size(strokeWidth).style({
        opacity: 1
      });
      this.scene.addLayer(layer2);
      this.layers.push(layer2);
      this.lineLayer = layer2;
    }
  }, {
    key: "addLabelLayer",
    value: function addLabelLayer(labelData) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'json';
      var labelLayer = this.addLabel(labelData, type);
      this.scene.addLayer(labelLayer);
      this.layers.push(labelLayer);
      this.labelLayer = labelLayer;
    }
  }, {
    key: "addBubbleLayer",
    value: function addBubbleLayer(labelData) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'json';
      var _this$options4 = this.options,
          bubble = _this$options4.bubble,
          zIndex = _this$options4.zIndex,
          _this$options4$data = _this$options4.data,
          data = _this$options4$data === void 0 ? [] : _this$options4$data,
          joinBy = _this$options4.joinBy;
      var bubbleLayer = new PointLayer({
        zIndex: zIndex + 0.3
      }).source(labelData, {
        parser: {
          type: type,
          coordinates: 'center'
        },
        transforms: data.length === 0 ? [] : [{
          type: 'join',
          sourceField: joinBy[1],
          targetField: joinBy[0],
          data: data
        }]
      });
      this.setLayerAttribute(bubbleLayer, 'color', bubble.color);
      this.setLayerAttribute(bubbleLayer, 'size', bubble.size);
      this.setLayerAttribute(bubbleLayer, 'shape', bubble.shape);

      if (bubble.scale) {
        bubbleLayer.scale(bubble.scale.field, {
          type: bubble.scale.type
        });
      }

      bubbleLayer.style(bubble.style);
      this.scene.addLayer(bubbleLayer);
      this.layers.push(bubbleLayer);
      this.bubbleLayer = bubbleLayer;
      return bubbleLayer;
    }
  }, {
    key: "addLabel",
    value: function addLabel(labelData) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'json';
      var _this$options5 = this.options,
          label = _this$options5.label,
          zIndex = _this$options5.zIndex;
      var labelLayer = new PointLayer({
        zIndex: zIndex + 0.4
      }).source(labelData, {
        parser: {
          type: type,
          coordinates: 'center'
        }
      }).color(label.color).shape(label.field, 'text').size(10).style({
        opacity: label.opacity,
        stroke: label.stroke,
        strokeWidth: label.strokeWidth,
        textAllowOverlap: label.textAllowOverlap
      });
      return labelLayer;
    }
  }, {
    key: "addPopup",
    value: function addPopup() {
      var _this3 = this;

      var popup = this.options.popup;
      var popupLayer;

      if (popup.triggerLayer) {
        popupLayer = popup.triggerLayer === 'bubble' ? this.bubbleLayer : this.fillLayer;
      } else {
        popupLayer = this.options.bubble.enable ? this.bubbleLayer : this.fillLayer;
      }

      popupLayer.on(popup.openTriggerEvent, function (e) {
        var html = popup.Html ? popup.Html(e.feature.properties ? e.feature.properties : e.feature) : '';
        _this3.popup = new Popup(_objectSpread({
          closeButton: false
        }, popup.option)).setLnglat(e.lngLat).setHTML(html);

        _this3.scene.addPopup(_this3.popup);
      });
      popupLayer.on(popup.closeTriggerEvent, function (e) {
        _this3.popup.remove();
      });
    }
  }, {
    key: "setLayerAttribute",
    value: function setLayerAttribute(layer, type, attr) {
      if (isObject(attr)) {
        layer[type](attr.field, attr.values);
      } else {
        layer[type](attr);
      }
    }
  }]);

  return BaseLayer;
}(EventEmitter);

export { BaseLayer as default };
//# sourceMappingURL=baseLayer.js.map