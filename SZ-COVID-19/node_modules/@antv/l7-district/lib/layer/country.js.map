{"version":3,"sources":["../../src/layer/country.ts"],"names":["CountryLayer","scene","option","depth","options","addProvinceFill","addProvinceLabel","countryConfig","geoDataLevel","country","CHN","addProvinceLine","provinceLine","addCityBorder","cityLine","addCountyBorder","countryLine","fetchData","fill","fillData","addFillLayer","label","fillLabel","enable","addLabelLayer","filter","v","name","addMCLabel","cfg","lineData","border1","features","feature","type","properties","borderFc","nationalBorder","nationalFc","addNationBorder","boundaries","boundaries2","nationalStroke","provinceStroke","provinceStrokeWidth","nationalWidth","chinaNationalStroke","chinaNationalWidth","coastlineStroke","coastlineWidth","stroke","strokeWidth","zIndex","lineLayer","LineLayer","source","size","shape","color","lineLayer2","style","lineType","dashArray","addLayer","layers","push","cityStroke","cityStrokeWidth","cityline","opacity","countyStrokeWidth","countyStroke","data","center","labelLayer1","addText","maxZoom","labelLayer2","minZoom","labelLayer","labelData","offset","PointLayer","parser","coordinates","textAllowOverlap","textOffset","BaseLayer"],"mappings":"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","sourcesContent":["import { LineLayer, PointLayer, Scene, StyleAttrField } from '@antv/l7';\nimport { getDataConfig } from '../index';\nimport BaseLayer from './baseLayer';\nimport { IDistrictLayerOption } from './interface';\n\nexport default class CountryLayer extends BaseLayer {\n  constructor(scene: Scene, option: Partial<IDistrictLayerOption> = {}) {\n    super(scene, option);\n    const { depth } = this.options;\n    this.addProvinceFill();\n    this.addProvinceLabel();\n    const countryConfig = getDataConfig(this.options.geoDataLevel).country.CHN[\n      depth\n    ];\n\n    this.addProvinceLine(countryConfig.provinceLine);\n\n    if (depth === 2 * 1) {\n      this.addCityBorder(countryConfig.cityLine);\n    }\n    if (depth === 3 * 1) {\n      this.addCountyBorder(countryConfig.countryLine);\n    }\n  }\n  protected async addProvinceFill() {\n    const { depth } = this.options;\n    const countryConfig = getDataConfig(this.options.geoDataLevel).CHN[depth];\n    const fillData = await this.fetchData(countryConfig.fill);\n    this.addFillLayer(fillData);\n  }\n  protected async addProvinceLabel() {\n    const { depth } = this.options;\n    const countryConfig = getDataConfig(this.options.geoDataLevel).country.CHN[\n      depth\n    ];\n    const fillLabel = countryConfig.label\n      ? await this.fetchData(countryConfig.label)\n      : null;\n    if (fillLabel && this.options.label?.enable) {\n      this.addLabelLayer(\n        fillLabel.filter((v: any) => {\n          return v.name !== '澳门';\n        }),\n      );\n      this.addMCLabel();\n    }\n  }\n  // 国界,省界\n  protected async addProvinceLine(cfg: any) {\n    const lineData = await this.fetchData(cfg);\n    const border1 = lineData.features.filter((feature: any) => {\n      const type = feature.properties.type;\n      return type === '1' || type === '4';\n    });\n    const borderFc = {\n      type: 'FeatureCollection',\n      features: border1,\n    };\n    const nationalBorder = lineData.features.filter((feature: any) => {\n      const type = feature.properties.type;\n      return type !== '1' && type !== '4';\n    });\n    const nationalFc = {\n      type: 'FeatureCollection',\n      features: nationalBorder,\n    };\n    this.addNationBorder(nationalFc, borderFc);\n  }\n\n  // 国界,省界\n  protected addFillLine(lineData: any) {\n    const border1 = lineData.features.filter((feature: any) => {\n      const type = feature.properties.type;\n      return type === '1' || type === '4';\n    });\n    const borderFc = {\n      type: 'FeatureCollection',\n      features: border1,\n    };\n    const nationalBorder = lineData.features.filter((feature: any) => {\n      const type = feature.properties.type;\n      return type !== '1' && type !== '4';\n    });\n    const nationalFc = {\n      type: 'FeatureCollection',\n      features: nationalBorder,\n    };\n    this.addNationBorder(nationalFc, borderFc);\n  }\n\n  private async loadData() {\n    const { depth } = this.options;\n    const countryConfig = getDataConfig(this.options.geoDataLevel).country.CHN[\n      depth\n    ];\n    const fillData = await this.fetchData(countryConfig.fill);\n    const fillLabel = countryConfig.label\n      ? await this.fetchData(countryConfig.label)\n      : null;\n    return [fillData, fillLabel];\n  }\n  // 省级行政区划\n  private async addNationBorder(boundaries: any, boundaries2: any) {\n    const {\n      nationalStroke,\n      provinceStroke,\n      provinceStrokeWidth,\n      nationalWidth,\n      chinaNationalStroke,\n      chinaNationalWidth,\n      coastlineStroke,\n      coastlineWidth,\n      stroke,\n      strokeWidth,\n      zIndex,\n    } = this.options;\n    // 添加国界线\n    const lineLayer = new LineLayer({\n      zIndex: zIndex + 0.1,\n    })\n      .source(boundaries)\n      .size('type', (v: string) => {\n        if (v === '3') {\n          return provinceStrokeWidth;\n        } else if (v === '2') {\n          return coastlineWidth;\n        } else if (v === '0') {\n          return chinaNationalWidth;\n        } else {\n          return '#fff';\n        }\n      })\n      .shape('line')\n      .color('type', (v: string) => {\n        if (v === '3') {\n          return provinceStroke;\n        } else if (v === '2') {\n          return coastlineStroke;\n        } else if (v === '0') {\n          return chinaNationalStroke;\n        } else {\n          return '#fff';\n        }\n      });\n    // 添加未定国界\n    const lineLayer2 = new LineLayer({\n      zIndex: zIndex + 0.1,\n    })\n      .source(boundaries2)\n      .size(nationalWidth)\n      .shape('line')\n      .color('gray')\n      .style({\n        lineType: 'dash',\n        dashArray: [2, 2],\n      });\n\n    this.scene.addLayer(lineLayer);\n    this.scene.addLayer(lineLayer2);\n    this.layers.push(lineLayer, lineLayer2);\n  }\n  // 市边界\n  private async addCityBorder(cfg: any) {\n    const border1 = await this.fetchData(cfg);\n    const { cityStroke, cityStrokeWidth } = this.options;\n    const cityline = new LineLayer({\n      zIndex: 2,\n    })\n      .source(border1)\n      .color(cityStroke)\n      .size(cityStrokeWidth)\n      .style({\n        opacity: 0.5,\n      });\n    this.scene.addLayer(cityline);\n    this.layers.push(cityline);\n  }\n\n  // 县级边界\n  private async addCountyBorder(cfg: any) {\n    const border1 = await this.fetchData(cfg);\n    const { countyStrokeWidth, countyStroke } = this.options;\n    const cityline = new LineLayer({\n      zIndex: 2,\n    })\n      .source(border1)\n      .color(countyStroke)\n      .size(countyStrokeWidth)\n      .style({\n        opacity: 0.5,\n      });\n    this.scene.addLayer(cityline);\n    this.layers.push(cityline);\n  }\n\n  private addMCLabel() {\n    const data = [\n      {\n        name: '澳门',\n        center: [113.537747, 22.187009],\n      },\n    ];\n    const labelLayer1 = this.addText(data, { maxZoom: 2.9 }, [-45, -10]);\n    const labelLayer2 = this.addText(data, { minZoom: 3, maxZoom: 4 }, [\n      -35,\n      -10,\n    ]);\n    const labelLayer = this.addText(data, { minZoom: 4.1 }, [0, 0]);\n    this.scene.addLayer(labelLayer);\n    this.scene.addLayer(labelLayer1);\n    this.scene.addLayer(labelLayer2);\n    this.layers.push(labelLayer, labelLayer1, labelLayer2);\n  }\n\n  private addText(labelData: any, option: any, offset: [number, number]) {\n    const { label, zIndex } = this.options;\n    const labelLayer = new PointLayer({\n      zIndex: zIndex + 0.4,\n      ...option,\n    })\n      .source(labelData, {\n        parser: {\n          type: 'json',\n          coordinates: 'center',\n        },\n      })\n      .color(label.color as StyleAttrField)\n      .shape('name', 'text')\n      .size(10)\n      .style({\n        opacity: label.opacity,\n        stroke: label.stroke,\n        strokeWidth: label.strokeWidth,\n        textAllowOverlap: label.textAllowOverlap,\n        textOffset: offset,\n      });\n    return labelLayer;\n  }\n}\n"],"file":"country.js"}