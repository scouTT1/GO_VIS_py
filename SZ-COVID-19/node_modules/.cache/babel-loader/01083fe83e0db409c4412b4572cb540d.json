{"remainingRequest":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/babel-loader/lib/index.js!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/pc/components/bar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/pc/components/bar.vue","mtime":1617781888091},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/babel-loader/lib/index.js","mtime":1617788517170},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js","mtime":1617788568833}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsbCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3RvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZCI7Ci8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBlY2hhcnRzIGZyb20gJ2VjaGFydHMvbGliL2VjaGFydHMnOwppbXBvcnQgJ2VjaGFydHMvbGliL2NoYXJ0L2Jhcic7CmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7CmltcG9ydCBXb3JsZEpTT04gZnJvbSAnQC9kYXRhL3dvcmxkVHJlbmQnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0JhcicsCiAgbWV0aG9kczogewogICAgaW5pdERhdGE6IGZ1bmN0aW9uIGluaXREYXRhKCkgewogICAgICB2YXIgZGF0YSA9IF8uY2hhaW4oV29ybGRKU09OKS5tYXAoZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gW18ubGFzdChkLnRyZW5kLmxpc3RbMF0uZGF0YSksIGQubmFtZV07CiAgICAgIH0pLm9yZGVyQnkoZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gZFswXTsKICAgICAgfSwgJ2Rlc2MnKS5zbGljZSgwLCAxMCkudmFsdWUoKTsKCiAgICAgIHZhciBheGlzRGF0YSA9IGRhdGEubWFwKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIGRbMV07CiAgICAgIH0pOwogICAgICByZXR1cm4gewogICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgYXhpc0RhdGE6IGF4aXNEYXRhCiAgICAgIH07CiAgICB9LAogICAgaW5pdENoYXJ0OiBmdW5jdGlvbiBpbml0Q2hhcnQoKSB7CiAgICAgIHZhciBfdGhpcyRpbml0RGF0YSA9IHRoaXMuaW5pdERhdGEoKSwKICAgICAgICAgIGRhdGEgPSBfdGhpcyRpbml0RGF0YS5kYXRhLAogICAgICAgICAgYXhpc0RhdGEgPSBfdGhpcyRpbml0RGF0YS5heGlzRGF0YTsKCiAgICAgIHZhciBtYXhWYWx1ZSA9IF8ubWF4QnkoZGF0YSwgZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gZFswXTsKICAgICAgfSk7CgogICAgICB2YXIgb3B0aW9uID0gewogICAgICAgIGdyaWQ6IHsKICAgICAgICAgIGxlZnQ6ICc1JScsCiAgICAgICAgICByaWdodDogJzUlJywKICAgICAgICAgIGJvdHRvbTogJzUlJywKICAgICAgICAgIHRvcDogJzEwJScsCiAgICAgICAgICBjb250YWluTGFiZWw6IHRydWUKICAgICAgICB9LAogICAgICAgIHRvb2x0aXA6IHsKICAgICAgICAgIHRyaWdnZXI6ICdheGlzJywKICAgICAgICAgIGF4aXNQb2ludGVyOiB7CiAgICAgICAgICAgIHR5cGU6ICdub25lJwogICAgICAgICAgfSwKICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gZm9ybWF0dGVyKHBhcmFtcykgewogICAgICAgICAgICByZXR1cm4gcGFyYW1zWzBdLm5hbWUgKyAnPGJyLz4nICsgIjxzcGFuIHN0eWxlPSdkaXNwbGF5OmlubGluZS1ibG9jazttYXJnaW4tcmlnaHQ6NXB4O2JvcmRlci1yYWRpdXM6MTBweDt3aWR0aDo5cHg7aGVpZ2h0OjlweDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMzYsMjA3LDIzMywwLjkpJz48L3NwYW4+IiArIHBhcmFtc1swXS5zZXJpZXNOYW1lICsgJyA6ICcgKyBOdW1iZXIoKHBhcmFtc1swXS52YWx1ZS50b0ZpeGVkKDQpIC8gMTAwMDApLnRvRml4ZWQoMikpLnRvTG9jYWxlU3RyaW5nKCkgKyAnIOS4h+WFgzxici8+JzsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHhBeGlzOiB7CiAgICAgICAgICBzaG93OiBmYWxzZSwKICAgICAgICAgIHR5cGU6ICd2YWx1ZScKICAgICAgICB9LAogICAgICAgIHlBeGlzOiBbewogICAgICAgICAgdHlwZTogJ2NhdGVnb3J5JywKICAgICAgICAgIGludmVyc2U6IHRydWUsCiAgICAgICAgICBheGlzTGFiZWw6IHsKICAgICAgICAgICAgc2hvdzogdHJ1ZSwKICAgICAgICAgICAgdGV4dFN0eWxlOiB7CiAgICAgICAgICAgICAgY29sb3I6ICcjZmZmJwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgc3BsaXRMaW5lOiB7CiAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgYXhpc1RpY2s6IHsKICAgICAgICAgICAgc2hvdzogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICBheGlzTGluZTogewogICAgICAgICAgICBzaG93OiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIGRhdGE6IGF4aXNEYXRhCiAgICAgICAgfSwgewogICAgICAgICAgdHlwZTogJ2NhdGVnb3J5JywKICAgICAgICAgIGludmVyc2U6IHRydWUsCiAgICAgICAgICBheGlzVGljazogJ25vbmUnLAogICAgICAgICAgYXhpc0xpbmU6ICdub25lJywKICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICBheGlzTGFiZWw6IHsKICAgICAgICAgICAgdGV4dFN0eWxlOiB7CiAgICAgICAgICAgICAgY29sb3I6ICcjZmZmZmZmJywKICAgICAgICAgICAgICBmb250U2l6ZTogJzEyJwogICAgICAgICAgICB9LAogICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uIGZvcm1hdHRlcih2YWx1ZSkgewogICAgICAgICAgICAgIGlmICh2YWx1ZSA+PSAxMDAwMCkgewogICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSAvIDEwMDAwKS50b0xvY2FsZVN0cmluZygpICsgJ+S4hyc7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b0xvY2FsZVN0cmluZygpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIGRhdGE6IGRhdGEubWFwKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgIHJldHVybiBkWzBdOwogICAgICAgICAgfSkKICAgICAgICB9XSwKICAgICAgICBzZXJpZXM6IFt7CiAgICAgICAgICBuYW1lOiAn6YeR6aKdJywKICAgICAgICAgIHR5cGU6ICdiYXInLAogICAgICAgICAgemxldmVsOiAxLAogICAgICAgICAgaXRlbVN0eWxlOiB7CiAgICAgICAgICAgIG5vcm1hbDogewogICAgICAgICAgICAgIGJhckJvcmRlclJhZGl1czogMzAsCiAgICAgICAgICAgICAgY29sb3I6IG5ldyBlY2hhcnRzLmdyYXBoaWMuTGluZWFyR3JhZGllbnQoMCwgMCwgMSwgMCwgW3sKICAgICAgICAgICAgICAgIG9mZnNldDogMCwKICAgICAgICAgICAgICAgIGNvbG9yOiAncmdiKDU3LDg5LDI1NSwxKScKICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsCiAgICAgICAgICAgICAgICBjb2xvcjogJ3JnYig0NiwyMDAsMjA3LDEpJwogICAgICAgICAgICAgIH1dKQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgYmFyV2lkdGg6IDEwLAogICAgICAgICAgZGF0YTogZGF0YQogICAgICAgIH0sIHsKICAgICAgICAgIG5hbWU6ICfog4zmma8nLAogICAgICAgICAgdHlwZTogJ2JhcicsCiAgICAgICAgICBiYXJXaWR0aDogMTAsCiAgICAgICAgICBiYXJHYXA6ICctMTAwJScsCiAgICAgICAgICBkYXRhOiBuZXcgQXJyYXkoMTApLmZpbGwobWF4VmFsdWUpLAogICAgICAgICAgaXRlbVN0eWxlOiB7CiAgICAgICAgICAgIG5vcm1hbDogewogICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgyNCwzMSw2OCwxKScsCiAgICAgICAgICAgICAgYmFyQm9yZGVyUmFkaXVzOiAzMAogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfV0KICAgICAgfTsKICAgICAgdmFyIG15Q2hhcnQgPSBlY2hhcnRzLmluaXQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Jhci1jaGFydCcpKTsKICAgICAgbXlDaGFydC5zZXRPcHRpb24ob3B0aW9uKTsKICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB0aGlzLmluaXRDaGFydCgpOwogIH0KfTs="},{"version":3,"sources":["bar.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div id=\"bar-chart\">\n\n    </div>\n</template>\n\n<script>\n    import echarts from 'echarts/lib/echarts';\n    import 'echarts/lib/chart/bar'\n    import _ from 'lodash'\n\n    import WorldJSON from '@/data/worldTrend'\n\n    export default {\n        name: 'Bar',\n        methods: {\n            initData() {\n                const data = _.chain(WorldJSON)\n                    .map(d => (\n                        [_.last(d.trend.list[0].data), d.name]\n                    ))\n                    .orderBy(d => d[0], 'desc')\n                    .slice(0, 10)\n                    .value()\n                    \n                const axisData = data.map(d => d[1])\n                return { data, axisData }\n            },\n            initChart() {\n                const { data, axisData } = this.initData()\n                const maxValue = _.maxBy(data, d => d[0])\n                const option = {\n                    grid: {\n                        left: '5%',\n                        right: '5%',\n                        bottom: '5%',\n                        top: '10%',\n                        containLabel: true\n                    },\n                    tooltip: {\n                        trigger: 'axis',\n                        axisPointer: {\n                            type: 'none'\n                        },\n                        formatter: function(params) {\n                            return params[0].name + '<br/>' +\n                                \"<span style='display:inline-block;margin-right:5px;border-radius:10px;width:9px;height:9px;background-color:rgba(36,207,233,0.9)'></span>\" +\n                                params[0].seriesName + ' : ' + Number((params[0].value.toFixed(4) / 10000).toFixed(2)).toLocaleString() + ' 万元<br/>'\n                        }\n                    },\n                    xAxis: {\n                        show: false,\n                        type: 'value'\n                    },\n                    yAxis: [{\n                        type: 'category',\n                        inverse: true,\n                        axisLabel: {\n                            show: true,\n                            textStyle: {\n                                color: '#fff'\n                            },\n                        },\n                        splitLine: {\n                            show: false\n                        },\n                        axisTick: {\n                            show: false\n                        },\n                        axisLine: {\n                            show: false\n                        },\n                        data: axisData\n                    }, {\n                        type: 'category',\n                        inverse: true,\n                        axisTick: 'none',\n                        axisLine: 'none',\n                        show: true,\n                        axisLabel: {\n                            textStyle: {\n                                color: '#ffffff',\n                                fontSize: '12'\n                            },\n                            formatter: function(value) {\n                                if (value >= 10000) {\n                                    return (value / 10000).toLocaleString() + '万';\n                                } else {\n                                    return value.toLocaleString();\n                                }\n                            },\n                        },\n                        data: data.map(d => d[0])\n                    }],\n                    series: [{\n                            name: '金额',\n                            type: 'bar',\n                            zlevel: 1,\n                            itemStyle: {\n                                normal: {\n                                    barBorderRadius: 30,\n                                    color: new echarts.graphic.LinearGradient(0, 0, 1, 0, [{\n                                        offset: 0,\n                                        color: 'rgb(57,89,255,1)'\n                                    }, {\n                                        offset: 1,\n                                        color: 'rgb(46,200,207,1)'\n                                    }]),\n                                },\n                            },\n                            barWidth: 10,\n                            data,\n                        },\n                        {\n                            name: '背景',\n                            type: 'bar',\n                            barWidth: 10,\n                            barGap: '-100%',\n                            data: new Array(10).fill(maxValue),\n                            itemStyle: {\n                                normal: {\n                                    color: 'rgba(24,31,68,1)',\n                                    barBorderRadius: 30,\n                                }\n                            },\n                        },\n                    ]\n                };\n                const myChart = echarts.init(document.getElementById('bar-chart'));\n\n                myChart.setOption(option)\n            }\n        },\n        mounted() {\n            this.initChart()\n        }\n    }\n</script>\n\n<style lang=\"less\" scoped>\n    #bar-chart{\n        height: 100%;\n    }\n</style>"],"sourceRoot":"src/page/pc/components"}]}