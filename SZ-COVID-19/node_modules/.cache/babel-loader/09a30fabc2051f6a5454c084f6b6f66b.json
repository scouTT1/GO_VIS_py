{"remainingRequest":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/babel-loader/lib/index.js!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/track/components/map.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/track/components/map.vue","mtime":1617781888091},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/babel-loader/lib/index.js","mtime":1617788517170},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js","mtime":1617788568833}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["map.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"lines-map-container\">\n        <div class=\"map-tool\">\n            <el-switch\n                v-model=\"isAll\"\n                active-text=\"累计\"\n                inactive-text=\"新增\"\n                inactive-color=\"#b2d4f3\"\n                @change=\"handleAllChange\"\n            />\n        </div>\n        <div class=\"map-title\">{{currentDate}}</div>\n        <div id=\"trackMap\">\n\n        </div>\n    </div>\n</template>\n\n<script>\n    import eventBus from '../eventBus';\n    import _ from 'lodash';\n    import { extent } from 'd3'\n    import echarts from 'echarts/lib/echarts';\n    import 'echarts/lib/component/geo'\n    import 'echarts/map/js/world.js';\n    import StationGeo from '@/data/station'\n    import TrackJSON from '@/data/track'\n    import CountryMappingJSON from '@/data/countryMapping'\n    import CountryI18n from '@/data/countryI18n'\n\n    const PERIOD = 2;\n\n    const DEFAULT_CENTER = [114.279, 30]\n\n    const DEFAULT_ZOOM = 9\n\n    export default {\n        name: 'Map',\n        data() {\n            return {\n                isAll: true,\n                currentDate: '',\n            }\n        },\n        methods: {\n            initMap() {\n                const series = this.initSeries();\n                const {options, timelineData} = this.initOptions()\n                var option = {\n                    baseOption: {\n                        timeline: {\n                            currentIndex: this.timelineIndex || 0,\n                            orient: 'vertical',\n                            top: '20',\n                            left: '90%',\n                            right: '20',\n                            bottom: '10',\n                            axisType: 'category',\n                            symbol: 'rect',\n                            symbolSize: [10, 6],\n                            itemStyle: {\n                                color: '#152a68',\n                            },\n                            checkpointStyle: {\n                                symbol: 'roundRect',\n                                color: '#3c8af1',\n                                symbolSize: [10, 6],\n                                borderWidth: 0,\n                            },\n                            controlStyle: {\n                                itemSize: 15,\n                            },\n                            emphasis: {\n                                itemStyle: {\n                                    color: '#3c8af1',\n                                },\n                                label: {\n                                    color: '#3c8af1',\n                                },\n                                controlStyle: {\n                                    color: '#3c8af1',\n                                    borderColor: '3c8af1',\n                                    borderWidth: 2,\n                                },\n                            },\n                            label: {\n                                position: 10,\n                                interval: 1,\n                                color: '#aaa',\n                                fontSize: 10,\n                                formatter: value => {\n                                    const date = new Date(value)\n                                    return [date.getFullYear(),\n                                        date.getMonth() + 1,\n                                        date.getDate()]\n                                            .join('-')\n                                }\n                            },\n                            loop: true,\n                            autoPlay: true,\n                            playInterval: PERIOD * 1000,\n                            data: timelineData\n                        },\n                        tooltip: {\n                            trigger: 'item',\n                            backgroundColor: 'rgba(166, 200, 76, 0.82)',\n                            borderColor: '#FFFFCC',\n                            showDelay: 0,\n                            hideDelay: 0,\n                            enterable: true,\n                            transitionDuration: 0,\n                            extraCssText: 'z-index:100',\n                        },\n                        visualMap: [\n                        {\n                            id: 'heatmap',\n                            show: true,\n                            seriesIndex: 5,\n                            min: 0,\n                            max: 10000,\n                            left: 10,\n                            itemGap: 4,\n                            itemSymbol: 'circle',\n                            textStyle: {\n                                color: '#aaa',\n                            },\n                            pieces: [{\n                                gt: 10000,\n                                label: \"> 10000 人\",\n                                color: \"rgba(57, 111, 255)\"\n                            }, {\n                                gte: 5000,\n                                lte: 10000,\n                                label: \"5000 - 10000 人\",\n                                color: \"rgba(50, 97, 222)\"\n                            }, {\n                                gte: 200,\n                                lt: 5000,\n                                label: \"200 - 5000 人\",\n                                color: \"rgba(42, 82, 189)\"\n                            }, {\n                                gt: 0,\n                                lt: 200,\n                                label: \"0 - 200人\",\n                                color: \"rgba(35, 68, 156)\"\n                            }, {\n                                value: 0,\n                                color: \"rgba(51, 69, 89, .5)\"\n                            }],\n                        }],\n                        geo: {\n                            map: 'world',\n                            zoom: DEFAULT_ZOOM,\n                            center: DEFAULT_CENTER,\n                            label: {\n                                emphasis: {\n                                    show: false\n                                }\n                            },\n                            scaleLimit: {\n                                min: 1,\n                                max: 12\n                            },\n                            roam: true, //是否允许缩放\n                            itemStyle: {\n                                normal: {\n                                    color: 'rgba(51, 69, 89, .5)', //地图背景色\n                                    borderColor: '#516a89', //省市边界线00fcff 516a89\n                                    borderWidth: 1\n                                },\n                                emphasis: {\n                                    color: 'rgba(51, 69, 89, .5)' //悬浮背景\n                                }\n                            }\n                        },\n                        series: series\n                    },\n                    options,\n                };\n                this.myChart.setOption(option, true);\n            },\n            initHeatData() {\n                return fetch('d/format_timeseries.json')\n                    .then(res => res.json())\n                    .then(res => {\n                        this.heatData = _.pickBy(res, (d, k) => CountryMappingJSON[k])\n                    })\n            },\n            initData() {\n                const trackObj = _.chain(TrackJSON)\n                    .filter(d => d.track.length > 0)\n                    .map(d => {\n                        const { track, blh } = d;\n                        const startstation = track[0];\n                        const endstation = track[track.length - 1];\n                        const trackItem = [{\n                            name: startstation.from,\n                            time: startstation.time,\n                            value: 1,\n                            coord: StationGeo[startstation.from],\n                        }, {\n                            name: endstation.to,\n                            time: endstation.time,\n                            value: 1,\n                            coord: StationGeo[endstation.to],\n                        }]\n                        return {\n                            blh,\n                            track: trackItem,\n                        }\n                    })\n                    .reduce((o, d) => {\n                        const key = d.track[1].time\n                        if (o[key]) {\n                            o[key].push(d)\n                        } else {\n                            o[key] = [d]\n                        }\n                        return o\n                    }, {})\n                    .pickBy('length')\n                    .value()\n                return trackObj;\n            },\n            getScatterData(data) {\n                return _.chain(data)\n                    .flattenDeep()\n                    .reduce((obj, d) => {\n                        if(d.name === '深圳') return obj;\n                        if (!obj[d.name]) {\n                            obj[d.name] = {\n                                name: d.name,\n                                value: d.coord.concat(0),\n                            }\n                        }\n                        obj[d.name].value[2] += 1\n                        return obj;\n                    }, {})\n                    .values()\n                    .value();\n            },\n            getHeatData(date) {\n                return _.chain(this.heatData)\n                    .map((arr, k) => {\n                        const findItem = arr.find(d1 => d1.date === date) || {}\n                        return {\n                            name: CountryMappingJSON[k],\n                            value: findItem.exist || 0\n                        }\n                    })\n                    .value()\n            },\n            initOptions() {\n                const timeTrack = this.initData()\n                this.timeTrack = timeTrack\n                const options = _.chain(timeTrack)\n                    .orderBy(d => new Date(d[0].track[1].time).getTime())\n                    .map((d, i, arr) => {\n                        const trackData = d.map(d1 => d1.track)\n                        const addTrackData = this.isAll\n                        ? _.chain(arr)\n                            .slice(0, i + 1)\n                            .flatten()\n                            .map(d1 => d1.track)\n                            .value()\n                        : []\n                        const scatterData = this.getScatterData(trackData)\n                        const addScatterData = this.getScatterData(addTrackData)\n                        \n                        const newDate = new Date(d[0].track[1].time)\n                        const currentDate = `${newDate.getFullYear()}-${\n                            newDate.getMonth() + 1}-${newDate.getDate()}`\n                        const heatData = this.getHeatData(currentDate)\n                        return {\n                            series: [{\n                                data: trackData,\n                            },\n                            {\n                                data: scatterData,\n                            },\n                            {\n                                data: addTrackData,\n                            },\n                            {\n                                data: addScatterData\n                            },\n                            {},\n                            {\n                                data: heatData\n                            }]\n                        }\n                    })\n                    .value()\n\n                const timelineData = _.chain(timeTrack)\n                    .keys()\n                    .orderBy(d => new Date(d).getTime())\n                    .value()\n                return {options, timelineData}\n            },\n            calculateRadius(d) {\n                if(d[2] >= 10) {\n                    return 10\n                } else if(d[2]<=4){\n                    return 4;\n                }\n                return d[2] \n            },\n            initSeries() {\n                const series = [];\n                series.push(\n                    {\n                        type: \"lines\",\n                        zlevel: 2,\n                        effect: {\n                            show: true,\n                            period: PERIOD - .5, //箭头指向速度，值越小速度越快\n                            trailLength: 0.02, //特效尾迹长度[0,1]值越大，尾迹越长重\n                            symbol: \"arrow\", //箭头图标\n                            symbolSize: 5, //图标大小\n                            loop: false,\n                        },\n                        lineStyle: {\n                            width: 1, //尾迹线条宽度\n                            opacity: 0.4, //尾迹线条透明度\n                            curveness: 0.3, //尾迹线条曲直度\n                            color: '#fe7335',\n                        },\n                    },\n                    {\n                        type: 'effectScatter',\n                        coordinateSystem: 'geo',\n                        zlevel: 1,\n                        rippleEffect: { //涟漪特效\n                            period: 4, //动画时间，值越小速度越快\n                            brushType: 'stroke', //波纹绘制方式 stroke, fill\n                            scale: 4 //波纹圆环最大限制，值越大波纹越大\n                        },\n                        label: {\n                            normal: {\n                                show: true,\n                                position: 'right', //显示位置\n                                offset: [5, 0], //偏移设置\n                                formatter: function(params){//圆环显示文字\n                                    return params.data.name;\n                                },\n                                fontSize: 10\n                            },\n                            emphasis: {\n                                show: true\n                            }\n                        },\n                        symbol: 'circle',\n                        symbolSize: d => this.calculateRadius(d),\n                        itemStyle: {\n                            color: '#fe7335',\n                        },\n                    },\n                    {\n                        id: 'allLines',\n                        type: \"lines\",\n                        zlevel: 2,\n                        lineStyle: {\n                            color: '#fe7335',\n                            width: 1, //尾迹线条宽度\n                            opacity: 0.8, //尾迹线条透明度\n                            curveness: 0.3 //尾迹线条曲直度\n                        },\n                        animation: false,\n                    },\n                    {\n                        id: 'addScatter',\n                        type: 'scatter',\n                        coordinateSystem: 'geo',\n                        zlevel: 1,\n                        label: {\n                            show: false,\n                        },\n                        symbol: 'circle',\n                        symbolSize: d => this.calculateRadius(d),\n                        itemStyle: {\n                            color: '#fe7335',\n                            opacity: .8,\n                        },\n                        animation: false,\n                    },\n                    {\n                        type: 'scatter',\n                        coordinateSystem: 'geo',\n                        zlevel: 2,\n                        rippleEffect: {\n                            period: 4,\n                            brushType: 'stroke',\n                            scale: 4\n                        },\n                        label: {\n                            normal: {\n                                show: true,\n                                position: 'right',\n                                //offset:[5, 0],\n                                color: '#1cf3e8',\n                                formatter: '{b}',\n                                textStyle: {\n                                    color: \"#1cf3e8\"\n                                }\n                            },\n                            emphasis: {\n                                show: true,\n                                color: \"#f60\"\n                            }\n                        },\n                        symbol: 'pin',\n                        symbolSize: 20,\n                        z: 10,\n                        data: [{\n                            name: '深圳',\n                            value: StationGeo['深圳'].concat([10]),\n                        }],\n                    },\n                    {\n                        type: 'map',\n                        geoIndex: 0,\n                        tooltip: {\n                            show: true,\n                            formatter: ({data}) => {\n                                const name = CountryI18n[data.name] ? CountryI18n[data.name] : data.name\n                                const value = isNaN(data.value) || !data.value ? 0 : data.value\n                                let str = `${this.currentDate}<br/>${name}: ${value}  例`\n                                if (!data.name) str = null\n                                return str\n                            }\n                        },\n                    }\n                );\n                return series;\n            },\n            hanleTimelinechanged() {\n                this.updateDate(0)\n                this.myChart.on('timelinechanged', ({ currentIndex }) => {\n                    this.timelineIndex = currentIndex\n                    const { series } = this.myChart.getOption()\n                    const seriesIndex = this.isAll ? 3 : 1\n                    const geoArr = _.chain(series[seriesIndex].data)\n                        .map(d => d.value.slice(0, 2))\n                        .value()\n                    geoArr.push(StationGeo[\"深圳\"])\n                    const lngExtent = extent(geoArr, d => +d[0]).map((d, i) => +d + (i === 0 ? (-1) : 1))\n                    const latExtent = extent(geoArr, d => +d[1]).map((d, i) => +d + (i === 0 ? (-10) : 10))\n\n                    const lngCenter = Number.isNaN(lngExtent[0]) ? DEFAULT_CENTER[0] : (lngExtent[0] + lngExtent[1]) / 2\n                    const latCenter = Number.isNaN(latExtent[0]) ? DEFAULT_CENTER[1] : (latExtent[0] + latExtent[1]) / 2\n                    const center = [lngCenter, latCenter]\n                    const zoom = Number.isNaN(lngExtent[0]) ? DEFAULT_ZOOM\n                        : _.min([1 / ((lngExtent[1] - lngExtent[0]) / 360), 1 / ((latExtent[1] - latExtent[0]) / 180)])\n\n                    const heatExtent = extent(series[5].data, d => d.value)\n                    this.myChart.setOption({\n                        geo: {\n                            zoom,\n                            center,\n                        },\n                        visualMap: {\n                            id: 'heatmap',\n                            min: heatExtent[0] + 1,\n                            max: heatExtent[1] + heatExtent[1] * .2\n                        },\n                        series: {\n                            id: 'allLines',\n                            lineStyle: {\n                                opacity: '.2',\n                            },\n                        }\n                    }, this)\n\n                    this.updateDate(currentIndex)\n                })\n            },\n            updateDate(index) {\n                const timeArr = _.chain(this.timeTrack)\n                    .map((d, k) => ({\n                        date: k,\n                        time: new Date(k).getTime(),\n                    }))\n                    .orderBy('time')\n                    .map('date')\n                    .value()\n                eventBus.$emit('trackMapTime', {\n                    date: timeArr[index],\n                    isAdd: this.isAll,\n                })\n                this.currentDate = timeArr[index]\n            },\n            handleAllChange() {\n                this.initMap()\n            },\n        },\n        mounted() {\n            this.initHeatData().then(() => {\n                this.myChart = echarts.init(document.getElementById('trackMap'), 'light');\n                this.initMap()\n                this.hanleTimelinechanged()\n            })\n        },\n        beforeDestroy() {\n            this.myChart.dispose()\n        }\n    }\n</script>\n\n<style lang=\"less\">\n   .el-switch__label{\n        color: #aaa;\n    }\n    .lines-map-container {\n        position: relative;\n        padding: 0;\n        margin: 0;\n        width: 70%;\n        .map-tool {\n            position: absolute;\n            top: 5px;\n            z-index: 2;\n            transform: scale(.8);\n        }\n        .map-title {\n            position: absolute;\n            top: 10px;\n            right: 100px;\n            z-index: 2;\n            color: white;\n            font-size: 32px;\n            text-shadow: 3px 3px black, -2px -2px black, 2px -2px black,\n        }\n        #trackMap{\n            width: 100%;\n            height: 100%;\n        }\n    }\n</style>"],"sourceRoot":"src/page/track/components"}]}