{"remainingRequest":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/babel-loader/lib/index.js!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/comparison/components/szMap2.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/comparison/components/szMap2.vue","mtime":1618462761000},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/babel-loader/lib/index.js","mtime":1617788517170},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js","mtime":1617788568833}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["szMap2.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div ref=\"map\" class=\"map\"></div>\n</template>\n\n<script>\n    import echarts from 'echarts/lib/echarts';\n    import 'echarts/extension/bmap/bmap'\n    import style from '@/data/mapStyle2'\n    import ComJSON from '@/data/community';\n    import OutPJSON from '@/data/outpatient'\n    import { yiyuanStr, matouStr, addLocation, huocheStr, feijiStr} from './../data'\n\n    export default {\n            name: 'SzMap',\n            data () {\n                return {\n                    chart: echarts.ECharts,\n                    bmap: {\n                        enableMapClick: false,\n                    },\n                    linesSeries: [],\n                    scatterSeries: [],\n                    effectScatterSeries: [],\n                    mapZoom: 6,\n                }\n            },\n            mounted () {\n                this.initMap()\n            },\n            methods: {\n                initCommunity(){\n                    return ComJSON\n                        .map(d => ({\n                            name: d.name,\n                            value: d.coord.concat(5),\n                        }))\n                },\n                initOutpatient() {\n                    return OutPJSON.map(d => ({\n                        name: d.ORGAN_NAME,\n                        value: [d.latitude1, d.longitude1, 100]\n                    }))\n                },\n                initAddLocation(data) {\n                    return data.map(d => ({\n                        name: d.name,\n                        value: d.coord.concat(8),\n                    }))\n                },\n                initMap () {\n                    const communityData = this.initCommunity();\n                    const outpatientData = this.initOutpatient();\n                    this.chart = echarts.init(this.$refs.map)\n                    this.chart.setOption({\n                        animation: false,\n                        bmap: {\n                            center: [114.16455183658751, 22.628456637984177],\n                            zoom: 11,\n                            roam: true,\n                            mapStyle: {\n                                styleJson:  style\n                            }\n                        },\n                        tooltip : {\n                            trigger: 'item',\n                            formatter: d => {\n                                let final = '';\n                                switch (d.seriesName) {\n                                    case '码头':\n                                    case '火车站':\n                                    case '机场':\n                                        final = `\n                                                ${d.marker}${d.name}<br />\n                                                客流量: &nbsp;&nbsp;&nbsp;<br />\n                                                核酸检测人数: &nbsp;&nbsp;&nbsp;<br />\n                                                发现疑似病例: &nbsp;&nbsp;&nbsp;\n                                            `\n                                        break;\n                                    case '确诊病例小区':\n                                        final = `\n                                            ${d.seriesName}<br />\n                                            ${d.marker}${d.name}\n                                        `\n                                        break;\n                                    case '发热门诊':\n                                        final = `\n                                                ${d.marker}${d.name}<br />\n                                                累计接诊: &nbsp;&nbsp;&nbsp;<br />\n                                                出院人数: &nbsp;&nbsp;&nbsp;<br />\n                                                现有病例: &nbsp;&nbsp;&nbsp;\n                                            `\n                                        break;\n                                    default:\n                                        break;\n                                }\n                                return final;\n                            }\n                        },\n                        legend: {\n                            orient: 'vertical',\n                            y: 'bottom',\n                            x: 'right',\n                            data: ['码头', '火车站', '机场', '发热门诊', '确诊病例小区'],\n                            textStyle: {\n                                color: '#fff'\n                            },\n                            itemHeight: 14,\n                            itemWidth : 14,\n                        },\n                        series: [{\n                            name: '确诊病例小区',\n                            type: 'effectScatter',\n                            coordinateSystem: 'bmap',\n                            symbolSize: d => d[2],\n                            data: communityData,\n                            showEffectOn: 'render',\n                            rippleEffect: {\n                                brushType: 'stroke'\n                            },\n                            hoverAnimation: true,\n                            zlevel: 1,\n                            itemStyle: {\n                                color: 'rgba(239, 83, 80, 0.54)',\n                                shadowBlur: 0,\n                            },\n                        }, {\n                            name: '发热门诊',\n                            type: 'scatter',\n                            coordinateSystem: 'bmap',\n                            data: outpatientData,\n                            symbolSize: 12,\n                            symbol: yiyuanStr,\n                            zlevel: 1,\n                        }, {\n                            name: '码头',\n                            type: 'scatter',\n                            coordinateSystem: 'bmap',\n                            data: this.initAddLocation(addLocation.filter(d => d.type===\"码头\")),\n                            symbolSize: 16,\n                            symbol: matouStr,\n                            zlevel: 2,\n                            label: {\n                                normal: {\n                                    formatter: '{b}',\n                                    position: 'right',\n                                    show: true,\n                                    color: '#fff',\n                                },\n                                emphasis: {\n                                    show: true\n                                }\n                            },\n                        }, {\n                            name: '火车站',\n                            type: 'scatter',\n                            coordinateSystem: 'bmap',\n                            data: this.initAddLocation(addLocation.filter(d => d.type===\"火车站\")),\n                            symbolSize: 16,\n                            symbol: huocheStr,\n                            zlevel: 2,\n                            label: {\n                                normal: {\n                                    formatter: '{b}',\n                                    position: 'right',\n                                    show: true,\n                                    color: '#fff',\n                                },\n                                emphasis: {\n                                    show: true\n                                }\n                            },\n                        }, {\n                            name: '机场',\n                            type: 'scatter',\n                            coordinateSystem: 'bmap',\n                            data: this.initAddLocation(addLocation.filter(d => d.type===\"机场\")),\n                            symbolSize: 16,\n                            symbol: feijiStr,\n                            zlevel: 2,\n                            label: {\n                                normal: {\n                                    formatter: '{b}',\n                                    position: 'right',\n                                    show: true,\n                                    color: '#fff',\n                                },\n                                emphasis: {\n                                    show: true\n                                }\n                            },\n                        }\n                        ]\n                    })\n                    // this.bmap = new window.BMap.Map(\"allmap\")\n                    this.bmap = this.chart.getModel().getComponent('bmap').getBMap()\n                    this.bmap.setMinZoom(10) // 设置地图最小缩放比例\n                    this.bmap.setMaxZoom(15) // 设置地图最大缩放比例\n                    const name = ['南山', '光明', '大鹏', '福田', '龙岗', '盐田', '宝安', '坪山', '罗湖', '龙华']\n                    name.map(d => {\n                        this.drawLine(`广东省深圳市${d}区`,  {\n                                strokeWeight: 2,\n                                strokeColor: 'gray',\n                                fillColor: 'rgba(0,0,0,0)',\n                            });\n                    })\n                    this.drawLine(`广东省深圳市`,  {\n                        strokeWeight: 2,\n                        strokeStyle: 'dashed',\n                        strokeColor: '#23caed',\n                        fillColor: 'rgba(0,0,0,0)',\n                        strokeOpacity: 1,\n                    });\n                },\n                drawLine (name, style) {\n                    var bdary = new window.BMap.Boundary();\n                    bdary.get(name, rs => {//获取行政区域\n                        // this.bmap.clearOverlays();//清除地图覆盖物\n                        var count = rs.boundaries.length; //行政区域的点有多少个\n                        var pointArray = [];\n                        for (var i = 0; i < count; i++) {\n                            var ply = new window.BMap.Polygon(rs.boundaries[i], style); //建立多边形覆盖物\n                            this.bmap.addOverlay(ply);  //添加覆盖物\n                            pointArray = pointArray.concat(ply.getPath());\n                        }\n                        // this.bmap.setViewport(pointArray);    //调整视野\n                    });\n                }\n            }\n        }\n</script>\n\n<style lang=\"less\" scoped>\n    .map{\n        width: 80%;\n    }\n</style>"],"sourceRoot":"src/page/comparison/components"}]}