{"remainingRequest":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/babel-loader/lib/index.js!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/comparison/components/worldMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/comparison/components/worldMap.vue","mtime":1617781942000},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/babel-loader/lib/index.js","mtime":1617788517170},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js","mtime":1617788568833}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7Ci8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBlY2hhcnRzIGZyb20gJ2VjaGFydHMvbGliL2VjaGFydHMnOwppbXBvcnQgJ2VjaGFydHMvbGliL2NvbXBvbmVudC9nZW8nOwppbXBvcnQgJ2VjaGFydHMvbWFwL2pzL3dvcmxkLmpzJzsKaW1wb3J0IHsgZXh0ZW50LCBzY2FsZUxvZyB9IGZyb20gJ2QzJzsKaW1wb3J0IF8gZnJvbSAnbG9kYXNoJzsKaW1wb3J0IFdvcmxkTGF5b3V0IGZyb20gJ0AvZGF0YS93b3JsZExheW91dCc7CmltcG9ydCBXb3JsZFRyZW5kIGZyb20gJ0AvZGF0YS93b3JsZFRyZW5kJzsKaW1wb3J0IE5hdGlvbkdlbyBmcm9tICdAL2RhdGEvbmF0aW9uR2VvJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdXb3JsZE1hcCcsCiAgbWV0aG9kczogewogICAgaW5pdE1hcDogZnVuY3Rpb24gaW5pdE1hcCgpIHsKICAgICAgdmFyIGRhdGEgPSB0aGlzLmluaXRXb3JsZERhdGEoKTsKICAgICAgdmFyIGRhdGFFeHRlbnQgPSBleHRlbnQoZGF0YSwgZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gZFsyXTsKICAgICAgfSk7CiAgICAgIHZhciBzY2FsZVNpemUgPSBzY2FsZUxvZygpLmRvbWFpbihkYXRhRXh0ZW50KS5yYW5nZShbOCwgMzBdKTsKICAgICAgdmFyIG9wdGlvbiA9IHsKICAgICAgICBnZW86IHsKICAgICAgICAgIG1hcDogJ3dvcmxkJywKICAgICAgICAgIHpvb206IDEuMiwKICAgICAgICAgIGxhYmVsOiB7CiAgICAgICAgICAgIGVtcGhhc2lzOiB7CiAgICAgICAgICAgICAgc2hvdzogZmFsc2UKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHJvYW06IGZhbHNlLAogICAgICAgICAgLy/mmK/lkKblhYHorrjnvKnmlL4KICAgICAgICAgIGl0ZW1TdHlsZTogewogICAgICAgICAgICBub3JtYWw6IHsKICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoNTEsIDY5LCA4OSwgLjUpJywKICAgICAgICAgICAgICAvL+WcsOWbvuiDjOaZr+iJsgogICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnIzUxNmE4OScsCiAgICAgICAgICAgICAgLy/nnIHluILovrnnlYznur8wMGZjZmYgNTE2YTg5CiAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZW1waGFzaXM6IHsKICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMzcsIDQzLCA2MSwgLjUpJyAvL+aCrOa1ruiDjOaZrwoKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgdmlzdWFsTWFwOiBbewogICAgICAgICAgdHlwZTogJ2NvbnRpbnVvdXMnLAogICAgICAgICAgc2hvdzogZmFsc2UsCiAgICAgICAgICBtaW46IGRhdGFFeHRlbnRbMF0sCiAgICAgICAgICBtYXg6IGRhdGFFeHRlbnRbMV0sCiAgICAgICAgICBkaW1lbnNpb246IDIsCiAgICAgICAgICBzZXJpZXNJbmRleDogMSwKICAgICAgICAgIGluUmFuZ2U6IHsKICAgICAgICAgICAgY29sb3I6IFsnI2JjNjI2MicsICcjYzYzZDNkJywgJyNhNTA2MDYnXSwKICAgICAgICAgICAgY29sb3JBbHBoYTogWy40LCAuOF0KICAgICAgICAgIH0KICAgICAgICB9XSwKICAgICAgICBzZXJpZXM6IFt7CiAgICAgICAgICB0eXBlOiAnY3VzdG9tJywKICAgICAgICAgIGNvb3JkaW5hdGVTeXN0ZW06ICdnZW8nLAogICAgICAgICAgZ2VvSW5kZXg6IDAsCiAgICAgICAgICByZW5kZXJJdGVtOiB0aGlzLnJlbmRlckl0ZW1IZXhCaW4sCiAgICAgICAgICBkYXRhOiBXb3JsZExheW91dAogICAgICAgIH0sIHsKICAgICAgICAgIHR5cGU6ICdzY2F0dGVyJywKICAgICAgICAgIGNvb3JkaW5hdGVTeXN0ZW06ICdnZW8nLAogICAgICAgICAgZGF0YTogZGF0YSwKICAgICAgICAgIGxhYmVsOiB7CiAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gZm9ybWF0dGVyKF9yZWYpIHsKICAgICAgICAgICAgICB2YXIgZGF0YSA9IF9yZWYuZGF0YTsKICAgICAgICAgICAgICByZXR1cm4gZGF0YVsyXSA+IDUwMDAwID8gZGF0YVszXSA6ICcnOwogICAgICAgICAgICB9LAogICAgICAgICAgICBmb250U2l6ZTogOSwKICAgICAgICAgICAgZm9udFdlaWdodDogJ2xpZ2h0ZXInCiAgICAgICAgICB9LAogICAgICAgICAgc3ltYm9sU2l6ZTogZnVuY3Rpb24gc3ltYm9sU2l6ZShkYXRhKSB7CiAgICAgICAgICAgIHJldHVybiBzY2FsZVNpemUoZGF0YVsyXSk7CiAgICAgICAgICB9CiAgICAgICAgfV0KICAgICAgfTsKICAgICAgdmFyIG15Q2hhcnQgPSBlY2hhcnRzLmluaXQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dvcmxkLW1hcCcpKTsKICAgICAgbXlDaGFydC5zZXRPcHRpb24ob3B0aW9uKTsKICAgIH0sCiAgICByZW5kZXJJdGVtSGV4QmluOiBmdW5jdGlvbiByZW5kZXJJdGVtSGV4QmluKHBhcmFtcywgYXBpKSB7CiAgICAgIHZhciBoZXhhZ29uUmFkaXVzSW5HZW9TaXplID0gMTsKICAgICAgdmFyIGNlbnRlciA9IGFwaS5jb29yZChbYXBpLnZhbHVlKDApLCBhcGkudmFsdWUoMSldKTsKICAgICAgdmFyIHBvaW50c0JHID0gW107CiAgICAgIHZhciBtYXhWaWV3UmFkaXVzID0gYXBpLnNpemUoW2hleGFnb25SYWRpdXNJbkdlb1NpemUsIDBdKVswXTsKICAgICAgdmFyIGFuZ2xlID0gTWF0aC5QSSAvIDY7CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY7IGkrKywgYW5nbGUgKz0gTWF0aC5QSSAvIDMpIHsKICAgICAgICBwb2ludHNCRy5wdXNoKFtjZW50ZXJbMF0gKyBtYXhWaWV3UmFkaXVzICogTWF0aC5jb3MoYW5nbGUpLCBjZW50ZXJbMV0gKyBtYXhWaWV3UmFkaXVzICogTWF0aC5zaW4oYW5nbGUpXSk7CiAgICAgIH0KCiAgICAgIHJldHVybiB7CiAgICAgICAgdHlwZTogJ2dyb3VwJywKICAgICAgICBjaGlsZHJlbjogW3sKICAgICAgICAgIHR5cGU6ICdwb2x5Z29uJywKICAgICAgICAgIHNoYXBlOiB7CiAgICAgICAgICAgIHBvaW50czogcG9pbnRzQkcKICAgICAgICAgIH0sCiAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICBzdHJva2U6IG51bGwsCiAgICAgICAgICAgIGZpbGw6ICdyZWQnLAogICAgICAgICAgICBsaW5lV2lkdGg6IDAKICAgICAgICAgIH0sCiAgICAgICAgICB6MjogLTE5CiAgICAgICAgfV0KICAgICAgfTsKICAgIH0sCiAgICBpbml0V29ybGREYXRhOiBmdW5jdGlvbiBpbml0V29ybGREYXRhKCkgewogICAgICB2YXIgZGF0YSA9IFdvcmxkVHJlbmQubWFwKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIE5hdGlvbkdlb1tkLm5hbWVdID8gTmF0aW9uR2VvW2QubmFtZV0uY29uY2F0KFtfLmxhc3QoZC50cmVuZC5saXN0WzBdLmRhdGEpXSwgZC5uYW1lKSA6IGZhbHNlOwogICAgICB9KTsKICAgICAgcmV0dXJuIGRhdGE7CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy5pbml0TWFwKCk7CiAgfQp9Ow=="},{"version":3,"sources":["worldMap.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div id=\"world-map\">\n        \n    </div>\n</template>\n\n<script>\n    import echarts from 'echarts/lib/echarts';\n    import 'echarts/lib/component/geo'\n    import 'echarts/map/js/world.js';\n    import { extent, scaleLog } from 'd3'\n    import _ from 'lodash'\n    import WorldLayout from '@/data/worldLayout'\n    import WorldTrend from '@/data/worldTrend'\n    import NationGeo from '@/data/nationGeo'\n\n    export default {\n        name: 'WorldMap',\n        methods: {\n            initMap() {\n                const data = this.initWorldData()\n                const dataExtent = extent(data, d => d[2])\n                const scaleSize = scaleLog()\n                    .domain(dataExtent)\n                    .range([8, 30])\n                const option = {\n                    geo: {\n                        map: 'world',\n                        zoom: 1.2,\n                        label: {\n                            emphasis: {\n                                show: false\n                            }\n                        },\n                        roam: false, //是否允许缩放\n                        itemStyle: {\n                            normal: {\n                                color: 'rgba(51, 69, 89, .5)', //地图背景色\n                                borderColor: '#516a89', //省市边界线00fcff 516a89\n                                borderWidth: 1\n                            },\n                            emphasis: {\n                                color: 'rgba(37, 43, 61, .5)' //悬浮背景\n                            }\n                        }\n                    },\n                    visualMap: [{\n                        type: 'continuous',\n                        show: false,\n                        min: dataExtent[0],\n                        max: dataExtent[1],\n                        dimension: 2,\n                        seriesIndex: 1,\n                        inRange: {\n                            color: ['#bc6262', '#c63d3d', '#a50606'],\n                            colorAlpha: [.4, .8],\n                        }\n                    }],\n                    series: [{\n                        type: 'custom',\n                        coordinateSystem: 'geo',\n                        geoIndex: 0,\n                        renderItem: this.renderItemHexBin,\n                        data: WorldLayout\n                    },\n                    {\n                        type: 'scatter',\n                        coordinateSystem: 'geo',\n                        data,\n                        label: {\n                            show: true,\n                            formatter: ({data}) => {\n                                return data[2] > 50000 ? data[3] : ''\n                            },\n                            fontSize: 9,\n                            fontWeight: 'lighter',\n                        },\n                        symbolSize: data => {\n                            return scaleSize(data[2])\n                        }\n\n                    }]\n                };\n                const myChart = echarts.init(document.getElementById('world-map'));\n                myChart.setOption(option);\n            },\n            renderItemHexBin(params, api) {\n                const hexagonRadiusInGeoSize = 1;\n                var center = api.coord([api.value(0), api.value(1)]);\n                var pointsBG = [];\n                var maxViewRadius = api.size([hexagonRadiusInGeoSize, 0])[0];\n                var angle = Math.PI / 6;\n                for (var i = 0; i < 6; i++, angle += Math.PI / 3) {\n                    pointsBG.push([\n                        center[0] + maxViewRadius * Math.cos(angle),\n                        center[1] + maxViewRadius * Math.sin(angle)\n                    ]);\n                }\n                return {\n                    type: 'group',\n                    children: [{\n                        type: 'polygon',\n                        shape: {\n                            points: pointsBG\n                        },\n                        style: {\n                            stroke: null,\n                            fill: 'red',\n                            lineWidth: 0\n                        },\n                        z2: -19\n                    }]\n                };\n            },\n            initWorldData() {\n                const data = WorldTrend.map(d => (\n                    NationGeo[d.name]\n                    ? NationGeo[d.name].concat([_.last(d.trend.list[0].data)], d.name)\n                    : false\n                ))\n                return data\n            }\n        },\n        mounted() {\n            this.initMap()\n        }\n    }\n</script>\n\n<style lang=\"less\" scoped>\n    #world-map{\n        height: 100%;\n    }\n</style>"],"sourceRoot":"src/page/comparison/components"}]}