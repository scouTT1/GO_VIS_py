{"remainingRequest":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/babel-loader/lib/index.js!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/ranking/components/sankey.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/ranking/components/sankey.vue","mtime":1617781942000},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/babel-loader/lib/index.js","mtime":1617788517170},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js","mtime":1617788568833}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["sankey.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div id=\"sankey\">\n\n    </div>\n</template>\n\n<script>\n    import _ from 'lodash'\n    import echarts from 'echarts/lib/echarts';\n    import 'echarts/lib/chart/sankey'\n    import TrackJSON from '@/data/track'\n    // import { scaleLinear } from 'd3'\n\n\n    const DIM = ['age_range', 'xb','period','origin', 'tran', ]\n\n    const ITEM_STYLE = {\n        xb(){\n            return {\n                '男': {\n                    color: '#3a7ba5',\n                },\n                '女': {\n                    color: '#9d4da7',\n                },\n            }\n        }\n    }\n\n    const TRAN_ORDER = {\n        '私家/专车': 0,\n        '出租车': 1,\n        '3A109航船': 2,\n        '深圳湾口岸': 3,\n        '航空': 4,\n        '不明': 5,\n    }\n\n    const SORT_FUN = {\n        'age_range': data => {\n            return _.orderBy(data, d => {\n                switch(d.name) {\n                    case '婴幼儿/青少年(0~15)': return 0\n                    case '青年(16~30)': return 1\n                    case '中青年(30~45)': return 2\n                    case '中年(45~60)': return 3\n                    case '老年(>60)': return 4\n                }\n            })\n        },\n        'origin': data => {\n            return data.sort(a => COUNTRY.indexOf(a.name) !== -1 ? 1 : -1)\n        },\n        'tran': data => {\n            return _.orderBy(data, d => TRAN_ORDER[d.name])\n        },\n        'period': data => {\n            return _.orderBy(data, d => {\n                switch(d.name) {\n                    case '疫情初期(~1/23)': return 0\n                    case '发展期(1/23~2/6)': return 1\n                    case '国内二次传播期(2/6~2/20)': return 2\n                    case '国外输入期(2/20~)': return 3\n                }\n            })\n        }\n    }\n\n    const COUNTRY = [\"巴西\", \"法国\", \"柬埔寨\", \"澳门\", \"荷兰\",\n        \"菲律宾\", \"俄罗斯\", \"新加坡\", \"西班牙\", \"瑞士\", \"泰国\",\n        \"英国\", \"美国\"]\n\n    const getAgeCategory = age => {\n        if (age >= 0 && age <= 15) {\n            return '婴幼儿/青少年(0~15)'\n        }\n        if (age > 15 && age <= 30) {\n            return '青年(16~30)'\n        }\n        if (age > 30 && age <= 45) {\n            return '中青年(30~45)'\n        }\n        if (age > 45 && age <= 60) {\n            return '中年(45~60)'\n        }\n        if (age > 60) {\n            return '老年(>60)'\n        }\n    }\n\n    const ChinaPeriod = ['2020/1/23', '2020/2/6', '2020/2/20']\n        .map(d => new Date(d).getTime())\n\n    const getPeriod = date => {\n        const newDate = new Date(date).getTime()\n        if (newDate <= ChinaPeriod[0]) {\n            return '疫情初期(~1/23)'\n        }\n        if (newDate > ChinaPeriod[0] && newDate < ChinaPeriod[1]) {\n            return '发展期(1/23~2/6)'\n        }\n        if (newDate > ChinaPeriod[1] && newDate < ChinaPeriod[2]) {\n            return '国内二次传播期(2/6~2/20)'\n        }\n        if (newDate >= ChinaPeriod[2]) {\n            return '国外输入期(2/20~)'\n        }\n        \n    }\n\n    // const scale = scaleLinear()\n    //     .domain([1, 200])\n    //     .range(['#87cc7c', '#966d4b','#935740', '#69277e', '#9d4da7'])\n\n    export default {\n        name: 'SanKey',\n        methods: {\n            getNodes(data) {\n                return DIM.reduce((arr, key) => {\n                    const styles = ITEM_STYLE[key] && ITEM_STYLE[key]() || {}\n                    let tempArr =  _.chain(data)\n                        .map(d => {\n                            return {\n                                name: d[key],\n                                itemStyle: styles[d[key]],\n                            }\n                        })\n                        .uniqBy('name')\n                        .value()\n                        tempArr = SORT_FUN[key] ? SORT_FUN[key](tempArr) : tempArr\n                    return arr.concat(tempArr)\n                }, [])\n            },\n            getLinks(data) {\n                const links = [];\n                DIM.forEach((d, i, arr) => {\n                    if (i === arr.length - 1) return\n                    data.forEach(d1 => {\n                        const source = d1[d]\n                        const target = d1[arr[i + 1]]\n                        const value = data.filter(d2 => d2[d] === source\n                            && d2[arr[i + 1]] === target\n                            ).length\n                        links.push({\n                            source,\n                            target,\n                            value,\n                            lineStyle: {\n                                // color: scale(value),\n                            },\n                        })\n                    })\n                })\n\n                return _.uniqWith(links, _.isEqual)\n            },\n            initData() {\n                const data = _.chain(TrackJSON)\n                    // .slice(0, 400)\n                    .filter(d => d.track.length)\n                    .map(d => {\n                        const {track, nl} = d\n                        let tran = track.length ? track[track.length - 1].tran : ''\n                        tran = tran.indexOf('航班') !== -1 ? '航空' : tran\n                        tran = /(私家)|(自驾)|(专车)|(商务车)/.test(tran) ? '私家/专车' : tran\n                        tran = /(的士)|(出租车)/.test(tran) ? '出租车' : tran\n                        const age_range = getAgeCategory(+nl)\n                        return _.pick({\n                            ...d,\n                            tran: tran || '不明',\n                            age_range,\n                            period: getPeriod(d.track[d.track.length - 1].time)\n                        },\n                        DIM\n                        )\n                    })\n                    .value()\n                \n                const nodes = this.getNodes(data)\n                const links = this.getLinks(data)\n                return {nodes, links}\n            },\n            initChart() {\n                const { nodes, links } = this.initData()\n                \n                const option = {\n                    color: ['#87cc7c', '#966d4b', '#935740', '#69277e', '#9d4da7'],\n                    tooltip: {\n                        trigger: \"item\",\n                        triggerOn: \"mousemove\"\n                    },\n                    series: {\n                        type: \"sankey\",\n                        left: 10,\n                        right: 50,\n                        nodeGap: 1,\n                        layoutIterations: 0,\n                        data: nodes, // 节点\n                        links: links, // 节点之间的连线\n                        draggable: false,\n                        focusNodeAdjacency: \"allEdges\", // 鼠标划上时高亮的节点和连线，allEdges表示鼠标划到节点上点亮节点上的连线及连线对应的节点\n                        label: {\n                            fontSize: 10,\n                            color: \"rgba(255,255,255,.8)\"\n                        },\n                        lineStyle: {\n                            color: 'source',\n                            curveness: 0.5\n                        },\n                    }\n                };\n\n                const myChart = echarts.init(document.getElementById('sankey'), 'light');\n                myChart.setOption(option)\n            }\n        },\n        mounted() {\n            setTimeout(this.initChart);\n        }\n    }\n</script>\n\n<style lang=\"less\" scoped>\n    #sankey{\n        height: 600px;\n    }\n</style>"],"sourceRoot":"src/page/ranking/components"}]}