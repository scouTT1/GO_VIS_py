{"remainingRequest":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/pc/components/worldMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/pc/components/worldMap.vue","mtime":1617781888091},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/babel-loader/lib/index.js","mtime":1617788517170},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js","mtime":1617788568833}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBlY2hhcnRzIGZyb20gJ2VjaGFydHMvbGliL2VjaGFydHMnOwppbXBvcnQgJ2VjaGFydHMvbGliL2NvbXBvbmVudC9nZW8nCmltcG9ydCAnZWNoYXJ0cy9tYXAvanMvd29ybGQuanMnOwppbXBvcnQgeyBleHRlbnQsIHNjYWxlTG9nIH0gZnJvbSAnZDMnCmltcG9ydCBfIGZyb20gJ2xvZGFzaCcKaW1wb3J0IFdvcmxkTGF5b3V0IGZyb20gJ0AvZGF0YS93b3JsZExheW91dCcKaW1wb3J0IFdvcmxkVHJlbmQgZnJvbSAnQC9kYXRhL3dvcmxkVHJlbmQnCmltcG9ydCBOYXRpb25HZW8gZnJvbSAnQC9kYXRhL25hdGlvbkdlbycKCmV4cG9ydCBkZWZhdWx0IHsKICAgIG5hbWU6ICdXb3JsZE1hcCcsCiAgICBtZXRob2RzOiB7CiAgICAgICAgaW5pdE1hcCgpIHsKICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuaW5pdFdvcmxkRGF0YSgpCiAgICAgICAgICAgIGNvbnN0IGRhdGFFeHRlbnQgPSBleHRlbnQoZGF0YSwgZCA9PiBkWzJdKQogICAgICAgICAgICBjb25zdCBzY2FsZVNpemUgPSBzY2FsZUxvZygpCiAgICAgICAgICAgICAgICAuZG9tYWluKGRhdGFFeHRlbnQpCiAgICAgICAgICAgICAgICAucmFuZ2UoWzgsIDMwXSkKICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gewogICAgICAgICAgICAgICAgZ2VvOiB7CiAgICAgICAgICAgICAgICAgICAgbWFwOiAnd29ybGQnLAogICAgICAgICAgICAgICAgICAgIHpvb206IDEuMiwKICAgICAgICAgICAgICAgICAgICBsYWJlbDogewogICAgICAgICAgICAgICAgICAgICAgICBlbXBoYXNpczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcm9hbTogZmFsc2UsIC8v5piv5ZCm5YWB6K6457yp5pS+CiAgICAgICAgICAgICAgICAgICAgaXRlbVN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbDogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDUxLCA2OSwgODksIC41KScsIC8v5Zyw5Zu+6IOM5pmv6ImyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJyM1MTZhODknLCAvL+ecgeW4gui+ueeVjOe6vzAwZmNmZiA1MTZhODkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAxCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGVtcGhhc2lzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMzcsIDQzLCA2MSwgLjUpJyAvL+aCrOa1ruiDjOaZrwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHZpc3VhbE1hcDogW3sKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY29udGludW91cycsCiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgbWluOiBkYXRhRXh0ZW50WzBdLAogICAgICAgICAgICAgICAgICAgIG1heDogZGF0YUV4dGVudFsxXSwKICAgICAgICAgICAgICAgICAgICBkaW1lbnNpb246IDIsCiAgICAgICAgICAgICAgICAgICAgc2VyaWVzSW5kZXg6IDEsCiAgICAgICAgICAgICAgICAgICAgaW5SYW5nZTogewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogWycjYmM2MjYyJywgJyNjNjNkM2QnLCAnI2E1MDYwNiddLAogICAgICAgICAgICAgICAgICAgICAgICBjb2xvckFscGhhOiBbLjQsIC44XSwKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9XSwKICAgICAgICAgICAgICAgIHNlcmllczogW3sKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY3VzdG9tJywKICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlU3lzdGVtOiAnZ2VvJywKICAgICAgICAgICAgICAgICAgICBnZW9JbmRleDogMCwKICAgICAgICAgICAgICAgICAgICByZW5kZXJJdGVtOiB0aGlzLnJlbmRlckl0ZW1IZXhCaW4sCiAgICAgICAgICAgICAgICAgICAgZGF0YTogV29ybGRMYXlvdXQKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3NjYXR0ZXInLAogICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVTeXN0ZW06ICdnZW8nLAogICAgICAgICAgICAgICAgICAgIGRhdGEsCiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiAoe2RhdGF9KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVsyXSA+IDUwMDAwID8gZGF0YVszXSA6ICcnCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiA5LAogICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiAnbGlnaHRlcicsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBzeW1ib2xTaXplOiBkYXRhID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjYWxlU2l6ZShkYXRhWzJdKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB9XQogICAgICAgICAgICB9OwogICAgICAgICAgICBjb25zdCBteUNoYXJ0ID0gZWNoYXJ0cy5pbml0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3b3JsZC1tYXAnKSk7CiAgICAgICAgICAgIG15Q2hhcnQuc2V0T3B0aW9uKG9wdGlvbik7CiAgICAgICAgfSwKICAgICAgICByZW5kZXJJdGVtSGV4QmluKHBhcmFtcywgYXBpKSB7CiAgICAgICAgICAgIGNvbnN0IGhleGFnb25SYWRpdXNJbkdlb1NpemUgPSAxOwogICAgICAgICAgICB2YXIgY2VudGVyID0gYXBpLmNvb3JkKFthcGkudmFsdWUoMCksIGFwaS52YWx1ZSgxKV0pOwogICAgICAgICAgICB2YXIgcG9pbnRzQkcgPSBbXTsKICAgICAgICAgICAgdmFyIG1heFZpZXdSYWRpdXMgPSBhcGkuc2l6ZShbaGV4YWdvblJhZGl1c0luR2VvU2l6ZSwgMF0pWzBdOwogICAgICAgICAgICB2YXIgYW5nbGUgPSBNYXRoLlBJIC8gNjsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA2OyBpKyssIGFuZ2xlICs9IE1hdGguUEkgLyAzKSB7CiAgICAgICAgICAgICAgICBwb2ludHNCRy5wdXNoKFsKICAgICAgICAgICAgICAgICAgICBjZW50ZXJbMF0gKyBtYXhWaWV3UmFkaXVzICogTWF0aC5jb3MoYW5nbGUpLAogICAgICAgICAgICAgICAgICAgIGNlbnRlclsxXSArIG1heFZpZXdSYWRpdXMgKiBNYXRoLnNpbihhbmdsZSkKICAgICAgICAgICAgICAgIF0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICB0eXBlOiAnZ3JvdXAnLAogICAgICAgICAgICAgICAgY2hpbGRyZW46IFt7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3BvbHlnb24nLAogICAgICAgICAgICAgICAgICAgIHNoYXBlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50czogcG9pbnRzQkcKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJ3JlZCcsCiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogMAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgejI6IC0xOQogICAgICAgICAgICAgICAgfV0KICAgICAgICAgICAgfTsKICAgICAgICB9LAogICAgICAgIGluaXRXb3JsZERhdGEoKSB7CiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBXb3JsZFRyZW5kLm1hcChkID0+ICgKICAgICAgICAgICAgICAgIE5hdGlvbkdlb1tkLm5hbWVdCiAgICAgICAgICAgICAgICA/IE5hdGlvbkdlb1tkLm5hbWVdLmNvbmNhdChbXy5sYXN0KGQudHJlbmQubGlzdFswXS5kYXRhKV0sIGQubmFtZSkKICAgICAgICAgICAgICAgIDogZmFsc2UKICAgICAgICAgICAgKSkKICAgICAgICAgICAgcmV0dXJuIGRhdGEKICAgICAgICB9CiAgICB9LAogICAgbW91bnRlZCgpIHsKICAgICAgICB0aGlzLmluaXRNYXAoKQogICAgfQp9Cg=="},{"version":3,"sources":["worldMap.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"worldMap.vue","sourceRoot":"src/page/pc/components","sourcesContent":["<template>\n    <div id=\"world-map\">\n        \n    </div>\n</template>\n\n<script>\n    import echarts from 'echarts/lib/echarts';\n    import 'echarts/lib/component/geo'\n    import 'echarts/map/js/world.js';\n    import { extent, scaleLog } from 'd3'\n    import _ from 'lodash'\n    import WorldLayout from '@/data/worldLayout'\n    import WorldTrend from '@/data/worldTrend'\n    import NationGeo from '@/data/nationGeo'\n\n    export default {\n        name: 'WorldMap',\n        methods: {\n            initMap() {\n                const data = this.initWorldData()\n                const dataExtent = extent(data, d => d[2])\n                const scaleSize = scaleLog()\n                    .domain(dataExtent)\n                    .range([8, 30])\n                const option = {\n                    geo: {\n                        map: 'world',\n                        zoom: 1.2,\n                        label: {\n                            emphasis: {\n                                show: false\n                            }\n                        },\n                        roam: false, //是否允许缩放\n                        itemStyle: {\n                            normal: {\n                                color: 'rgba(51, 69, 89, .5)', //地图背景色\n                                borderColor: '#516a89', //省市边界线00fcff 516a89\n                                borderWidth: 1\n                            },\n                            emphasis: {\n                                color: 'rgba(37, 43, 61, .5)' //悬浮背景\n                            }\n                        }\n                    },\n                    visualMap: [{\n                        type: 'continuous',\n                        show: false,\n                        min: dataExtent[0],\n                        max: dataExtent[1],\n                        dimension: 2,\n                        seriesIndex: 1,\n                        inRange: {\n                            color: ['#bc6262', '#c63d3d', '#a50606'],\n                            colorAlpha: [.4, .8],\n                        }\n                    }],\n                    series: [{\n                        type: 'custom',\n                        coordinateSystem: 'geo',\n                        geoIndex: 0,\n                        renderItem: this.renderItemHexBin,\n                        data: WorldLayout\n                    },\n                    {\n                        type: 'scatter',\n                        coordinateSystem: 'geo',\n                        data,\n                        label: {\n                            show: true,\n                            formatter: ({data}) => {\n                                return data[2] > 50000 ? data[3] : ''\n                            },\n                            fontSize: 9,\n                            fontWeight: 'lighter',\n                        },\n                        symbolSize: data => {\n                            return scaleSize(data[2])\n                        }\n\n                    }]\n                };\n                const myChart = echarts.init(document.getElementById('world-map'));\n                myChart.setOption(option);\n            },\n            renderItemHexBin(params, api) {\n                const hexagonRadiusInGeoSize = 1;\n                var center = api.coord([api.value(0), api.value(1)]);\n                var pointsBG = [];\n                var maxViewRadius = api.size([hexagonRadiusInGeoSize, 0])[0];\n                var angle = Math.PI / 6;\n                for (var i = 0; i < 6; i++, angle += Math.PI / 3) {\n                    pointsBG.push([\n                        center[0] + maxViewRadius * Math.cos(angle),\n                        center[1] + maxViewRadius * Math.sin(angle)\n                    ]);\n                }\n                return {\n                    type: 'group',\n                    children: [{\n                        type: 'polygon',\n                        shape: {\n                            points: pointsBG\n                        },\n                        style: {\n                            stroke: null,\n                            fill: 'red',\n                            lineWidth: 0\n                        },\n                        z2: -19\n                    }]\n                };\n            },\n            initWorldData() {\n                const data = WorldTrend.map(d => (\n                    NationGeo[d.name]\n                    ? NationGeo[d.name].concat([_.last(d.trend.list[0].data)], d.name)\n                    : false\n                ))\n                return data\n            }\n        },\n        mounted() {\n            this.initMap()\n        }\n    }\n</script>\n\n<style lang=\"less\" scoped>\n    #world-map{\n        height: 100%;\n    }\n</style>"]}]}