{"remainingRequest":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/comparison/components/szMap2.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/comparison/components/szMap2.vue","mtime":1618462761000},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/babel-loader/lib/index.js","mtime":1617788517170},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js","mtime":1617788568833}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["szMap2.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"szMap2.vue","sourceRoot":"src/page/comparison/components","sourcesContent":["<template>\n    <div ref=\"map\" class=\"map\"></div>\n</template>\n\n<script>\n    import echarts from 'echarts/lib/echarts';\n    import 'echarts/extension/bmap/bmap'\n    import style from '@/data/mapStyle2'\n    import ComJSON from '@/data/community';\n    import OutPJSON from '@/data/outpatient'\n    import { yiyuanStr, matouStr, addLocation, huocheStr, feijiStr} from './../data'\n\n    export default {\n            name: 'SzMap',\n            data () {\n                return {\n                    chart: echarts.ECharts,\n                    bmap: {\n                        enableMapClick: false,\n                    },\n                    linesSeries: [],\n                    scatterSeries: [],\n                    effectScatterSeries: [],\n                    mapZoom: 6,\n                }\n            },\n            mounted () {\n                this.initMap()\n            },\n            methods: {\n                initCommunity(){\n                    return ComJSON\n                        .map(d => ({\n                            name: d.name,\n                            value: d.coord.concat(5),\n                        }))\n                },\n                initOutpatient() {\n                    return OutPJSON.map(d => ({\n                        name: d.ORGAN_NAME,\n                        value: [d.latitude1, d.longitude1, 100]\n                    }))\n                },\n                initAddLocation(data) {\n                    return data.map(d => ({\n                        name: d.name,\n                        value: d.coord.concat(8),\n                    }))\n                },\n                initMap () {\n                    const communityData = this.initCommunity();\n                    const outpatientData = this.initOutpatient();\n                    this.chart = echarts.init(this.$refs.map)\n                    this.chart.setOption({\n                        animation: false,\n                        bmap: {\n                            center: [114.16455183658751, 22.628456637984177],\n                            zoom: 11,\n                            roam: true,\n                            mapStyle: {\n                                styleJson:  style\n                            }\n                        },\n                        tooltip : {\n                            trigger: 'item',\n                            formatter: d => {\n                                let final = '';\n                                switch (d.seriesName) {\n                                    case '码头':\n                                    case '火车站':\n                                    case '机场':\n                                        final = `\n                                                ${d.marker}${d.name}<br />\n                                                客流量: &nbsp;&nbsp;&nbsp;<br />\n                                                核酸检测人数: &nbsp;&nbsp;&nbsp;<br />\n                                                发现疑似病例: &nbsp;&nbsp;&nbsp;\n                                            `\n                                        break;\n                                    case '确诊病例小区':\n                                        final = `\n                                            ${d.seriesName}<br />\n                                            ${d.marker}${d.name}\n                                        `\n                                        break;\n                                    case '发热门诊':\n                                        final = `\n                                                ${d.marker}${d.name}<br />\n                                                累计接诊: &nbsp;&nbsp;&nbsp;<br />\n                                                出院人数: &nbsp;&nbsp;&nbsp;<br />\n                                                现有病例: &nbsp;&nbsp;&nbsp;\n                                            `\n                                        break;\n                                    default:\n                                        break;\n                                }\n                                return final;\n                            }\n                        },\n                        legend: {\n                            orient: 'vertical',\n                            y: 'bottom',\n                            x: 'right',\n                            data: ['码头', '火车站', '机场', '发热门诊', '确诊病例小区'],\n                            textStyle: {\n                                color: '#fff'\n                            },\n                            itemHeight: 14,\n                            itemWidth : 14,\n                        },\n                        series: [{\n                            name: '确诊病例小区',\n                            type: 'effectScatter',\n                            coordinateSystem: 'bmap',\n                            symbolSize: d => d[2],\n                            data: communityData,\n                            showEffectOn: 'render',\n                            rippleEffect: {\n                                brushType: 'stroke'\n                            },\n                            hoverAnimation: true,\n                            zlevel: 1,\n                            itemStyle: {\n                                color: 'rgba(239, 83, 80, 0.54)',\n                                shadowBlur: 0,\n                            },\n                        }, {\n                            name: '发热门诊',\n                            type: 'scatter',\n                            coordinateSystem: 'bmap',\n                            data: outpatientData,\n                            symbolSize: 12,\n                            symbol: yiyuanStr,\n                            zlevel: 1,\n                        }, {\n                            name: '码头',\n                            type: 'scatter',\n                            coordinateSystem: 'bmap',\n                            data: this.initAddLocation(addLocation.filter(d => d.type===\"码头\")),\n                            symbolSize: 16,\n                            symbol: matouStr,\n                            zlevel: 2,\n                            label: {\n                                normal: {\n                                    formatter: '{b}',\n                                    position: 'right',\n                                    show: true,\n                                    color: '#fff',\n                                },\n                                emphasis: {\n                                    show: true\n                                }\n                            },\n                        }, {\n                            name: '火车站',\n                            type: 'scatter',\n                            coordinateSystem: 'bmap',\n                            data: this.initAddLocation(addLocation.filter(d => d.type===\"火车站\")),\n                            symbolSize: 16,\n                            symbol: huocheStr,\n                            zlevel: 2,\n                            label: {\n                                normal: {\n                                    formatter: '{b}',\n                                    position: 'right',\n                                    show: true,\n                                    color: '#fff',\n                                },\n                                emphasis: {\n                                    show: true\n                                }\n                            },\n                        }, {\n                            name: '机场',\n                            type: 'scatter',\n                            coordinateSystem: 'bmap',\n                            data: this.initAddLocation(addLocation.filter(d => d.type===\"机场\")),\n                            symbolSize: 16,\n                            symbol: feijiStr,\n                            zlevel: 2,\n                            label: {\n                                normal: {\n                                    formatter: '{b}',\n                                    position: 'right',\n                                    show: true,\n                                    color: '#fff',\n                                },\n                                emphasis: {\n                                    show: true\n                                }\n                            },\n                        }\n                        ]\n                    })\n                    // this.bmap = new window.BMap.Map(\"allmap\")\n                    this.bmap = this.chart.getModel().getComponent('bmap').getBMap()\n                    this.bmap.setMinZoom(10) // 设置地图最小缩放比例\n                    this.bmap.setMaxZoom(15) // 设置地图最大缩放比例\n                    const name = ['南山', '光明', '大鹏', '福田', '龙岗', '盐田', '宝安', '坪山', '罗湖', '龙华']\n                    name.map(d => {\n                        this.drawLine(`广东省深圳市${d}区`,  {\n                                strokeWeight: 2,\n                                strokeColor: 'gray',\n                                fillColor: 'rgba(0,0,0,0)',\n                            });\n                    })\n                    this.drawLine(`广东省深圳市`,  {\n                        strokeWeight: 2,\n                        strokeStyle: 'dashed',\n                        strokeColor: '#23caed',\n                        fillColor: 'rgba(0,0,0,0)',\n                        strokeOpacity: 1,\n                    });\n                },\n                drawLine (name, style) {\n                    var bdary = new window.BMap.Boundary();\n                    bdary.get(name, rs => {//获取行政区域\n                        // this.bmap.clearOverlays();//清除地图覆盖物\n                        var count = rs.boundaries.length; //行政区域的点有多少个\n                        var pointArray = [];\n                        for (var i = 0; i < count; i++) {\n                            var ply = new window.BMap.Polygon(rs.boundaries[i], style); //建立多边形覆盖物\n                            this.bmap.addOverlay(ply);  //添加覆盖物\n                            pointArray = pointArray.concat(ply.getPath());\n                        }\n                        // this.bmap.setViewport(pointArray);    //调整视野\n                    });\n                }\n            }\n        }\n</script>\n\n<style lang=\"less\" scoped>\n    .map{\n        width: 80%;\n    }\n</style>"]}]}