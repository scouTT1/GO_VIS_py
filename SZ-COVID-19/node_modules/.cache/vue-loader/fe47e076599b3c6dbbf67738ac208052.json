{"remainingRequest":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/ranking/components/sankey.vue?vue&type=style&index=0&id=05002dd0&lang=less&scoped=true&","dependencies":[{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/ranking/components/sankey.vue","mtime":1617781942000},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/css-loader/dist/cjs.js","mtime":1617788566541},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1617788568833},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/postcss-loader/src/index.js","mtime":1617788568393},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/less-loader/dist/cjs.js","mtime":1617788599304},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js","mtime":1617788568833}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNzYW5rZXl7CiAgICBoZWlnaHQ6IDYwMHB4Owp9Cg=="},{"version":3,"sources":["sankey.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+NA;AACA;AACA","file":"sankey.vue","sourceRoot":"src/page/ranking/components","sourcesContent":["<template>\n    <div id=\"sankey\">\n\n    </div>\n</template>\n\n<script>\n    import _ from 'lodash'\n    import echarts from 'echarts/lib/echarts';\n    import 'echarts/lib/chart/sankey'\n    import TrackJSON from '@/data/track'\n    // import { scaleLinear } from 'd3'\n\n\n    const DIM = ['age_range', 'xb','period','origin', 'tran', ]\n\n    const ITEM_STYLE = {\n        xb(){\n            return {\n                '男': {\n                    color: '#3a7ba5',\n                },\n                '女': {\n                    color: '#9d4da7',\n                },\n            }\n        }\n    }\n\n    const TRAN_ORDER = {\n        '私家/专车': 0,\n        '出租车': 1,\n        '3A109航船': 2,\n        '深圳湾口岸': 3,\n        '航空': 4,\n        '不明': 5,\n    }\n\n    const SORT_FUN = {\n        'age_range': data => {\n            return _.orderBy(data, d => {\n                switch(d.name) {\n                    case '婴幼儿/青少年(0~15)': return 0\n                    case '青年(16~30)': return 1\n                    case '中青年(30~45)': return 2\n                    case '中年(45~60)': return 3\n                    case '老年(>60)': return 4\n                }\n            })\n        },\n        'origin': data => {\n            return data.sort(a => COUNTRY.indexOf(a.name) !== -1 ? 1 : -1)\n        },\n        'tran': data => {\n            return _.orderBy(data, d => TRAN_ORDER[d.name])\n        },\n        'period': data => {\n            return _.orderBy(data, d => {\n                switch(d.name) {\n                    case '疫情初期(~1/23)': return 0\n                    case '发展期(1/23~2/6)': return 1\n                    case '国内二次传播期(2/6~2/20)': return 2\n                    case '国外输入期(2/20~)': return 3\n                }\n            })\n        }\n    }\n\n    const COUNTRY = [\"巴西\", \"法国\", \"柬埔寨\", \"澳门\", \"荷兰\",\n        \"菲律宾\", \"俄罗斯\", \"新加坡\", \"西班牙\", \"瑞士\", \"泰国\",\n        \"英国\", \"美国\"]\n\n    const getAgeCategory = age => {\n        if (age >= 0 && age <= 15) {\n            return '婴幼儿/青少年(0~15)'\n        }\n        if (age > 15 && age <= 30) {\n            return '青年(16~30)'\n        }\n        if (age > 30 && age <= 45) {\n            return '中青年(30~45)'\n        }\n        if (age > 45 && age <= 60) {\n            return '中年(45~60)'\n        }\n        if (age > 60) {\n            return '老年(>60)'\n        }\n    }\n\n    const ChinaPeriod = ['2020/1/23', '2020/2/6', '2020/2/20']\n        .map(d => new Date(d).getTime())\n\n    const getPeriod = date => {\n        const newDate = new Date(date).getTime()\n        if (newDate <= ChinaPeriod[0]) {\n            return '疫情初期(~1/23)'\n        }\n        if (newDate > ChinaPeriod[0] && newDate < ChinaPeriod[1]) {\n            return '发展期(1/23~2/6)'\n        }\n        if (newDate > ChinaPeriod[1] && newDate < ChinaPeriod[2]) {\n            return '国内二次传播期(2/6~2/20)'\n        }\n        if (newDate >= ChinaPeriod[2]) {\n            return '国外输入期(2/20~)'\n        }\n        \n    }\n\n    // const scale = scaleLinear()\n    //     .domain([1, 200])\n    //     .range(['#87cc7c', '#966d4b','#935740', '#69277e', '#9d4da7'])\n\n    export default {\n        name: 'SanKey',\n        methods: {\n            getNodes(data) {\n                return DIM.reduce((arr, key) => {\n                    const styles = ITEM_STYLE[key] && ITEM_STYLE[key]() || {}\n                    let tempArr =  _.chain(data)\n                        .map(d => {\n                            return {\n                                name: d[key],\n                                itemStyle: styles[d[key]],\n                            }\n                        })\n                        .uniqBy('name')\n                        .value()\n                        tempArr = SORT_FUN[key] ? SORT_FUN[key](tempArr) : tempArr\n                    return arr.concat(tempArr)\n                }, [])\n            },\n            getLinks(data) {\n                const links = [];\n                DIM.forEach((d, i, arr) => {\n                    if (i === arr.length - 1) return\n                    data.forEach(d1 => {\n                        const source = d1[d]\n                        const target = d1[arr[i + 1]]\n                        const value = data.filter(d2 => d2[d] === source\n                            && d2[arr[i + 1]] === target\n                            ).length\n                        links.push({\n                            source,\n                            target,\n                            value,\n                            lineStyle: {\n                                // color: scale(value),\n                            },\n                        })\n                    })\n                })\n\n                return _.uniqWith(links, _.isEqual)\n            },\n            initData() {\n                const data = _.chain(TrackJSON)\n                    // .slice(0, 400)\n                    .filter(d => d.track.length)\n                    .map(d => {\n                        const {track, nl} = d\n                        let tran = track.length ? track[track.length - 1].tran : ''\n                        tran = tran.indexOf('航班') !== -1 ? '航空' : tran\n                        tran = /(私家)|(自驾)|(专车)|(商务车)/.test(tran) ? '私家/专车' : tran\n                        tran = /(的士)|(出租车)/.test(tran) ? '出租车' : tran\n                        const age_range = getAgeCategory(+nl)\n                        return _.pick({\n                            ...d,\n                            tran: tran || '不明',\n                            age_range,\n                            period: getPeriod(d.track[d.track.length - 1].time)\n                        },\n                        DIM\n                        )\n                    })\n                    .value()\n                \n                const nodes = this.getNodes(data)\n                const links = this.getLinks(data)\n                return {nodes, links}\n            },\n            initChart() {\n                const { nodes, links } = this.initData()\n                \n                const option = {\n                    color: ['#87cc7c', '#966d4b', '#935740', '#69277e', '#9d4da7'],\n                    tooltip: {\n                        trigger: \"item\",\n                        triggerOn: \"mousemove\"\n                    },\n                    series: {\n                        type: \"sankey\",\n                        left: 10,\n                        right: 50,\n                        nodeGap: 1,\n                        layoutIterations: 0,\n                        data: nodes, // 节点\n                        links: links, // 节点之间的连线\n                        draggable: false,\n                        focusNodeAdjacency: \"allEdges\", // 鼠标划上时高亮的节点和连线，allEdges表示鼠标划到节点上点亮节点上的连线及连线对应的节点\n                        label: {\n                            fontSize: 10,\n                            color: \"rgba(255,255,255,.8)\"\n                        },\n                        lineStyle: {\n                            color: 'source',\n                            curveness: 0.5\n                        },\n                    }\n                };\n\n                const myChart = echarts.init(document.getElementById('sankey'), 'light');\n                myChart.setOption(option)\n            }\n        },\n        mounted() {\n            setTimeout(this.initChart);\n        }\n    }\n</script>\n\n<style lang=\"less\" scoped>\n    #sankey{\n        height: 600px;\n    }\n</style>"]}]}