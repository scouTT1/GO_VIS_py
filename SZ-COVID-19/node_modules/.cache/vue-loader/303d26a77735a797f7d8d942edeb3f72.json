{"remainingRequest":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/comparison/components/bar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/comparison/components/bar.vue","mtime":1617781942000},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/babel-loader/lib/index.js","mtime":1617788517170},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js","mtime":1617788568833}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBlY2hhcnRzIGZyb20gJ2VjaGFydHMvbGliL2VjaGFydHMnOwppbXBvcnQgJ2VjaGFydHMvbGliL2NoYXJ0L2JhcicKaW1wb3J0IF8gZnJvbSAnbG9kYXNoJwoKaW1wb3J0IFdvcmxkSlNPTiBmcm9tICdAL2RhdGEvd29ybGRUcmVuZCcKCmV4cG9ydCBkZWZhdWx0IHsKICAgIG5hbWU6ICdCYXInLAogICAgbWV0aG9kczogewogICAgICAgIGluaXREYXRhKCkgewogICAgICAgICAgICBjb25zdCBkYXRhID0gXy5jaGFpbihXb3JsZEpTT04pCiAgICAgICAgICAgICAgICAubWFwKGQgPT4gKAogICAgICAgICAgICAgICAgICAgIFtfLmxhc3QoZC50cmVuZC5saXN0WzBdLmRhdGEpLCBkLm5hbWVdCiAgICAgICAgICAgICAgICApKQogICAgICAgICAgICAgICAgLm9yZGVyQnkoZCA9PiBkWzBdLCAnZGVzYycpCiAgICAgICAgICAgICAgICAuc2xpY2UoMCwgMTApCiAgICAgICAgICAgICAgICAudmFsdWUoKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGNvbnN0IGF4aXNEYXRhID0gZGF0YS5tYXAoZCA9PiBkWzFdKQogICAgICAgICAgICByZXR1cm4geyBkYXRhLCBheGlzRGF0YSB9CiAgICAgICAgfSwKICAgICAgICBpbml0Q2hhcnQoKSB7CiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgYXhpc0RhdGEgfSA9IHRoaXMuaW5pdERhdGEoKQogICAgICAgICAgICBjb25zdCBtYXhWYWx1ZSA9IF8ubWF4QnkoZGF0YSwgZCA9PiBkWzBdKQogICAgICAgICAgICBjb25zdCBvcHRpb24gPSB7CiAgICAgICAgICAgICAgICBncmlkOiB7CiAgICAgICAgICAgICAgICAgICAgbGVmdDogJzUlJywKICAgICAgICAgICAgICAgICAgICByaWdodDogJzUlJywKICAgICAgICAgICAgICAgICAgICBib3R0b206ICc1JScsCiAgICAgICAgICAgICAgICAgICAgdG9wOiAnMTAlJywKICAgICAgICAgICAgICAgICAgICBjb250YWluTGFiZWw6IHRydWUKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB0b29sdGlwOiB7CiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogJ2F4aXMnLAogICAgICAgICAgICAgICAgICAgIGF4aXNQb2ludGVyOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihwYXJhbXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtc1swXS5uYW1lICsgJzxici8+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPHNwYW4gc3R5bGU9J2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbi1yaWdodDo1cHg7Ym9yZGVyLXJhZGl1czoxMHB4O3dpZHRoOjlweDtoZWlnaHQ6OXB4O2JhY2tncm91bmQtY29sb3I6cmdiYSgzNiwyMDcsMjMzLDAuOSknPjwvc3Bhbj4iICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1swXS5zZXJpZXNOYW1lICsgJyA6ICcgKyBOdW1iZXIoKHBhcmFtc1swXS52YWx1ZS50b0ZpeGVkKDQpIC8gMTAwMDApLnRvRml4ZWQoMikpLnRvTG9jYWxlU3RyaW5nKCkgKyAnIOS4h+WFgzxici8+JwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB4QXhpczogewogICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICd2YWx1ZScKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB5QXhpczogW3sKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2F0ZWdvcnknLAogICAgICAgICAgICAgICAgICAgIGludmVyc2U6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgYXhpc0xhYmVsOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZmZmJwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgc3BsaXRMaW5lOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBheGlzVGljazogewogICAgICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYXhpc0xpbmU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRhdGE6IGF4aXNEYXRhCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NhdGVnb3J5JywKICAgICAgICAgICAgICAgICAgICBpbnZlcnNlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGF4aXNUaWNrOiAnbm9uZScsCiAgICAgICAgICAgICAgICAgICAgYXhpc0xpbmU6ICdub25lJywKICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGF4aXNMYWJlbDogewogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0U3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2ZmZmZmZicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEyJwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPj0gMTAwMDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHZhbHVlIC8gMTAwMDApLnRvTG9jYWxlU3RyaW5nKCkgKyAn5LiHJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvTG9jYWxlU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLm1hcChkID0+IGRbMF0pCiAgICAgICAgICAgICAgICB9XSwKICAgICAgICAgICAgICAgIHNlcmllczogW3sKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ+mHkeminScsCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdiYXInLAogICAgICAgICAgICAgICAgICAgICAgICB6bGV2ZWw6IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1TdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFyQm9yZGVyUmFkaXVzOiAzMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogbmV3IGVjaGFydHMuZ3JhcGhpYy5MaW5lYXJHcmFkaWVudCgwLCAwLCAxLCAwLCBbewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAncmdiKDU3LDg5LDI1NSwxKScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdyZ2IoNDYsMjAwLDIwNywxKScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBiYXJXaWR0aDogMTAsCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICfog4zmma8nLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmFyJywKICAgICAgICAgICAgICAgICAgICAgICAgYmFyV2lkdGg6IDEwLAogICAgICAgICAgICAgICAgICAgICAgICBiYXJHYXA6ICctMTAwJScsCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG5ldyBBcnJheSgxMCkuZmlsbChtYXhWYWx1ZSksCiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1TdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDI0LDMxLDY4LDEpJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXJCb3JkZXJSYWRpdXM6IDMwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGNvbnN0IG15Q2hhcnQgPSBlY2hhcnRzLmluaXQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Jhci1jaGFydCcpKTsKCiAgICAgICAgICAgIG15Q2hhcnQuc2V0T3B0aW9uKG9wdGlvbikKICAgICAgICB9CiAgICB9LAogICAgbW91bnRlZCgpIHsKICAgICAgICB0aGlzLmluaXRDaGFydCgpCiAgICB9Cn0K"},{"version":3,"sources":["bar.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bar.vue","sourceRoot":"src/page/comparison/components","sourcesContent":["<template>\n    <div id=\"bar-chart\">\n\n    </div>\n</template>\n\n<script>\n    import echarts from 'echarts/lib/echarts';\n    import 'echarts/lib/chart/bar'\n    import _ from 'lodash'\n\n    import WorldJSON from '@/data/worldTrend'\n\n    export default {\n        name: 'Bar',\n        methods: {\n            initData() {\n                const data = _.chain(WorldJSON)\n                    .map(d => (\n                        [_.last(d.trend.list[0].data), d.name]\n                    ))\n                    .orderBy(d => d[0], 'desc')\n                    .slice(0, 10)\n                    .value()\n                    \n                const axisData = data.map(d => d[1])\n                return { data, axisData }\n            },\n            initChart() {\n                const { data, axisData } = this.initData()\n                const maxValue = _.maxBy(data, d => d[0])\n                const option = {\n                    grid: {\n                        left: '5%',\n                        right: '5%',\n                        bottom: '5%',\n                        top: '10%',\n                        containLabel: true\n                    },\n                    tooltip: {\n                        trigger: 'axis',\n                        axisPointer: {\n                            type: 'none'\n                        },\n                        formatter: function(params) {\n                            return params[0].name + '<br/>' +\n                                \"<span style='display:inline-block;margin-right:5px;border-radius:10px;width:9px;height:9px;background-color:rgba(36,207,233,0.9)'></span>\" +\n                                params[0].seriesName + ' : ' + Number((params[0].value.toFixed(4) / 10000).toFixed(2)).toLocaleString() + ' 万元<br/>'\n                        }\n                    },\n                    xAxis: {\n                        show: false,\n                        type: 'value'\n                    },\n                    yAxis: [{\n                        type: 'category',\n                        inverse: true,\n                        axisLabel: {\n                            show: true,\n                            textStyle: {\n                                color: '#fff'\n                            },\n                        },\n                        splitLine: {\n                            show: false\n                        },\n                        axisTick: {\n                            show: false\n                        },\n                        axisLine: {\n                            show: false\n                        },\n                        data: axisData\n                    }, {\n                        type: 'category',\n                        inverse: true,\n                        axisTick: 'none',\n                        axisLine: 'none',\n                        show: true,\n                        axisLabel: {\n                            textStyle: {\n                                color: '#ffffff',\n                                fontSize: '12'\n                            },\n                            formatter: function(value) {\n                                if (value >= 10000) {\n                                    return (value / 10000).toLocaleString() + '万';\n                                } else {\n                                    return value.toLocaleString();\n                                }\n                            },\n                        },\n                        data: data.map(d => d[0])\n                    }],\n                    series: [{\n                            name: '金额',\n                            type: 'bar',\n                            zlevel: 1,\n                            itemStyle: {\n                                normal: {\n                                    barBorderRadius: 30,\n                                    color: new echarts.graphic.LinearGradient(0, 0, 1, 0, [{\n                                        offset: 0,\n                                        color: 'rgb(57,89,255,1)'\n                                    }, {\n                                        offset: 1,\n                                        color: 'rgb(46,200,207,1)'\n                                    }]),\n                                },\n                            },\n                            barWidth: 10,\n                            data,\n                        },\n                        {\n                            name: '背景',\n                            type: 'bar',\n                            barWidth: 10,\n                            barGap: '-100%',\n                            data: new Array(10).fill(maxValue),\n                            itemStyle: {\n                                normal: {\n                                    color: 'rgba(24,31,68,1)',\n                                    barBorderRadius: 30,\n                                }\n                            },\n                        },\n                    ]\n                };\n                const myChart = echarts.init(document.getElementById('bar-chart'));\n\n                myChart.setOption(option)\n            }\n        },\n        mounted() {\n            this.initChart()\n        }\n    }\n</script>\n\n<style lang=\"less\" scoped>\n    #bar-chart{\n        height: 100%;\n    }\n</style>"]}]}