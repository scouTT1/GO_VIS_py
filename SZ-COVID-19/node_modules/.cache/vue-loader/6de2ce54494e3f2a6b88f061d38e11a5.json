{"remainingRequest":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/comparison/components/bar.vue?vue&type=style&index=0&id=07de120e&lang=less&scoped=true&","dependencies":[{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/comparison/components/bar.vue","mtime":1617781942000},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/css-loader/dist/cjs.js","mtime":1617788566541},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1617788568833},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/postcss-loader/src/index.js","mtime":1617788568393},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/less-loader/dist/cjs.js","mtime":1617788599304},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js","mtime":1617788568833}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojYmFyLWNoYXJ0ewogICAgaGVpZ2h0OiAxMDAlOwp9Cg=="},{"version":3,"sources":["bar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4IA;AACA;AACA","file":"bar.vue","sourceRoot":"src/page/comparison/components","sourcesContent":["<template>\n    <div id=\"bar-chart\">\n\n    </div>\n</template>\n\n<script>\n    import echarts from 'echarts/lib/echarts';\n    import 'echarts/lib/chart/bar'\n    import _ from 'lodash'\n\n    import WorldJSON from '@/data/worldTrend'\n\n    export default {\n        name: 'Bar',\n        methods: {\n            initData() {\n                const data = _.chain(WorldJSON)\n                    .map(d => (\n                        [_.last(d.trend.list[0].data), d.name]\n                    ))\n                    .orderBy(d => d[0], 'desc')\n                    .slice(0, 10)\n                    .value()\n                    \n                const axisData = data.map(d => d[1])\n                return { data, axisData }\n            },\n            initChart() {\n                const { data, axisData } = this.initData()\n                const maxValue = _.maxBy(data, d => d[0])\n                const option = {\n                    grid: {\n                        left: '5%',\n                        right: '5%',\n                        bottom: '5%',\n                        top: '10%',\n                        containLabel: true\n                    },\n                    tooltip: {\n                        trigger: 'axis',\n                        axisPointer: {\n                            type: 'none'\n                        },\n                        formatter: function(params) {\n                            return params[0].name + '<br/>' +\n                                \"<span style='display:inline-block;margin-right:5px;border-radius:10px;width:9px;height:9px;background-color:rgba(36,207,233,0.9)'></span>\" +\n                                params[0].seriesName + ' : ' + Number((params[0].value.toFixed(4) / 10000).toFixed(2)).toLocaleString() + ' 万元<br/>'\n                        }\n                    },\n                    xAxis: {\n                        show: false,\n                        type: 'value'\n                    },\n                    yAxis: [{\n                        type: 'category',\n                        inverse: true,\n                        axisLabel: {\n                            show: true,\n                            textStyle: {\n                                color: '#fff'\n                            },\n                        },\n                        splitLine: {\n                            show: false\n                        },\n                        axisTick: {\n                            show: false\n                        },\n                        axisLine: {\n                            show: false\n                        },\n                        data: axisData\n                    }, {\n                        type: 'category',\n                        inverse: true,\n                        axisTick: 'none',\n                        axisLine: 'none',\n                        show: true,\n                        axisLabel: {\n                            textStyle: {\n                                color: '#ffffff',\n                                fontSize: '12'\n                            },\n                            formatter: function(value) {\n                                if (value >= 10000) {\n                                    return (value / 10000).toLocaleString() + '万';\n                                } else {\n                                    return value.toLocaleString();\n                                }\n                            },\n                        },\n                        data: data.map(d => d[0])\n                    }],\n                    series: [{\n                            name: '金额',\n                            type: 'bar',\n                            zlevel: 1,\n                            itemStyle: {\n                                normal: {\n                                    barBorderRadius: 30,\n                                    color: new echarts.graphic.LinearGradient(0, 0, 1, 0, [{\n                                        offset: 0,\n                                        color: 'rgb(57,89,255,1)'\n                                    }, {\n                                        offset: 1,\n                                        color: 'rgb(46,200,207,1)'\n                                    }]),\n                                },\n                            },\n                            barWidth: 10,\n                            data,\n                        },\n                        {\n                            name: '背景',\n                            type: 'bar',\n                            barWidth: 10,\n                            barGap: '-100%',\n                            data: new Array(10).fill(maxValue),\n                            itemStyle: {\n                                normal: {\n                                    color: 'rgba(24,31,68,1)',\n                                    barBorderRadius: 30,\n                                }\n                            },\n                        },\n                    ]\n                };\n                const myChart = echarts.init(document.getElementById('bar-chart'));\n\n                myChart.setOption(option)\n            }\n        },\n        mounted() {\n            this.initChart()\n        }\n    }\n</script>\n\n<style lang=\"less\" scoped>\n    #bar-chart{\n        height: 100%;\n    }\n</style>"]}]}