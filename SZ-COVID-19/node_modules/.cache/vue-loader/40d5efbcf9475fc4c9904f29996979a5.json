{"remainingRequest":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/information/components/force.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/information/components/force.vue","mtime":1617781942000},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/css-loader/dist/cjs.js","mtime":1617788566541},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1617788568833},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/postcss-loader/src/index.js","mtime":1617788568393},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/less-loader/dist/cjs.js","mtime":1617788599304},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js","mtime":1617788568833}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmZvcmNlQ29tewogICAgZGlzcGxheTogZmxleDsKICAgIHBhZGRpbmctdG9wOiAyMHB4OwogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgIGhlaWdodDogMTAwJTsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQouZm9yY2VDb20tbGVmdCB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgIGhlaWdodDogMTAwJTsKICAgIHdpZHRoOiAyMCU7Cn0KLmZpbHRlciB7CiAgICB3aWR0aDogMTAwJTsKICAgIGZvbnQtc2l6ZTogMTRweDsKICAgIC5zZWN0aW9uIHsKICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICBwYWRkaW5nLWJvdHRvbTogMTBweDsKICAgICAgICAuc2VjdGlvbi1ib2R5IHsKICAgICAgICAgICAgbWluLWhlaWdodDogMTUwcHg7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICBsaW5lLWhlaWdodDogMi41ZW07CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAgICAgIH0KICAgIH0KICAgIC5maWx0ZXItaXRlbSB7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAuZmlsdGVyLWl0ZW0tbmFtZXsKICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7CiAgICAgICAgICAgIHdpZHRoOiA4MHB4OwogICAgICAgICAgICBmb250LXNpemU6IDE0cHg7CiAgICAgICAgfQogICAgICAgIC5maWx0ZXItaXRlbS12YWx1ZXsKICAgICAgICAgICAgZmxleDogMTsKICAgICAgICB9CiAgICB9Cn0KI2NoYXJ0ewogICAgd2lkdGg6IDUwJTsKICAgIGhlaWdodDogMTAwJTsKICAgIG1pbi13aWR0aDogNzAwcHg7CiAgICBtaW4taGVpZ2h0OiA3MDBweDsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwp9Ci5sZWdlbmR7CiAgICAubGVnZW5kLWl0ZW17CiAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICAgIG1hcmdpbi10b3A6IDEwcHg7CiAgICAgICAgLmxlZ2VuZC1pdGVtLWljb257CiAgICAgICAgICAgIHdpZHRoOiA0MHB4OwogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgICAgICY+ZGl2ewogICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC5sZWdlbmQtY2lyY2xlewogICAgICAgICAgICAgICAgaGVpZ2h0OiAyMnB4OwogICAgICAgICAgICAgICAgd2lkdGg6IDIycHg7CiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMjJweDsKICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDQwcHg7CiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEycHg7CiAgICAgICAgICAgICAgICBjb2xvcjogI2ZmZjsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAwLCAwLCAwLjQ1KTsKICAgICAgICAgICAgICAgIGJvcmRlcjogc29saWQgMXB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAubGVnZW5kLWxpbmt7CiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOjNweDsKICAgICAgICAgICAgICAgIGhlaWdodDogMXB4OwogICAgICAgICAgICAgICAgd2lkdGg6IDQwcHg7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMCwgMCwgMC40NSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLmxlZ2VuZC1wb2ludGVyewogICAgICAgICAgICAgICAgd2lkdGg6IDA7CiAgICAgICAgICAgICAgICBoZWlnaHQ6IDA7CiAgICAgICAgICAgICAgICBib3JkZXI6IDhweCBzb2xpZCB0cmFuc3BhcmVudDsKICAgICAgICAgICAgICAgIGJvcmRlci10b3A6IDE0cHggc29saWQgIzE3NzhlODsKICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg2cHgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC5sZWdlbmQtdGltZXsKICAgICAgICAgICAgICAgIGhlaWdodDogMjBweDsKICAgICAgICAgICAgICAgIHdpZHRoOiA0MHB4OwogICAgICAgICAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjMDA5Njg4LCAjZmZjMTA3LCAjZmYwMDAwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAubWluIHsKICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoLjgpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgLmxlZ2VuZC1maWx0ZXItb25lewogICAgICAgICAgICAgICAgaGVpZ2h0OiAyMHB4OwogICAgICAgICAgICAgICAgd2lkdGg6IDQwcHg7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjMmY1MGE1OyAgIAogICAgICAgICAgICB9CiAgICAgICAgICAgIC5sZWdlbmQtZmlsdGVyLXR3b3sKICAgICAgICAgICAgICAgIGhlaWdodDogMjBweDsKICAgICAgICAgICAgICAgIHdpZHRoOiA0MHB4OwogICAgICAgICAgICAgICAgYmFja2dyb3VuZDogIzExNmNkNTsKICAgICAgICAgICAgICAgIGJvcmRlcjogc29saWQgMXB4ICNhYWE7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgLmxlZ2VuZC1pdGVtLWRlc2N7CiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4OwogICAgICAgIH0KICAgIH0KfQouZm9yY2V7CiAgICBjaXJjbGUgewogICAgICAgIHN0cm9rZTogI2ZmZjsKICAgICAgICBzdHJva2U6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTsKICAgICAgICBzdHJva2Utd2lkdGg6IDE7CiAgICAgICAgZmlsbDogI2JmNTY1ODsKICAgICAgICBmaWxsOiByZ2JhKDI1NSwgMCwgMCwgMC40NSk7CiAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgfQogICAgdGV4dHsKICAgICAgICBmaWxsOiAjZmZmOwogICAgICAgIHRleHQtYW5jaG9yOiBtaWRkbGU7CiAgICB9CiAgICAubGlua0l0ZW17CiAgICAgICAgc3Ryb2tlOiByZ2JhKDI1NSwgMCwgMCwgMC40NSk7CiAgICAgICAgc3Ryb2tlLXdpZHRoOiAxOwogICAgICAgIHRleHR7CiAgICAgICAgICAgIHN0cm9rZTogI2ZmZjsKICAgICAgICAgICAgc3Ryb2tlLXdpZHRoOiAuMjsKICAgICAgICB9CiAgICB9Cn0KCi50aW1lTGluZSB7CiAgICAudGltZWxpbmVBcmMgewogICAgICAgIHRyYW5zaXRpb246IC4zczsKICAgIH0KfQoKLnN1bkJ1cnN0IHsKICAgIC5zdW5CdXJzdEFyYyB7CiAgICAgICAgdHJhbnNpdGlvbjogLjNzOwogICAgICAgICY+cGF0aCB7CiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICB9CiAgICAgICAgJj50ZXh0IHsKICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7CiAgICAgICAgICAgIHRleHQtYW5jaG9yOiBtaWRkbGU7CiAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICAgICAgICBmaWxsOiAjZmZmOwogICAgICAgIH0KICAgIH0KfQoKLmluZm8gewogICAgaGVpZ2h0OiAxMDAlOwogICAgZmxleDogMTsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBtYXJnaW4tbGVmdDogMzBweDsKICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgICAuaW5mb0RhdGF7CiAgICAgICAgaGVpZ2h0OiA1MCU7CiAgICB9CiAgICAuaW5mby1jb250YWluZXJ7CiAgICAgICAgbWluLWhlaWdodDogMjAwcHg7CiAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDsKICAgIH0KICAgIC5pbmZvLWl0ZW17CiAgICAgICAgaGVpZ2h0OiA1MCU7CiAgICAgICAgbGluZS1oZWlnaHQ6IDMwcHg7CiAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAuaW5mby1pdGVtLWtleXsKICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgICAgICB3aWR0aDogMTAwcHg7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkZXI7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDsKICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7CiAgICAgICAgfQogICAgICAgIC5pbmZvLWl0ZW0tdmFsdWV7CiAgICAgICAgICAgIGZsZXg6IDE7CiAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDsKICAgICAgICB9CiAgICB9CiAgICAudHJlZURhdGEgewogICAgICAgIGhlaWdodDogNTAlOwogICAgICAgIG1hcmdpbi1ib3R0b206IDA7CiAgICAgICAgLnRyZWUtY29udGFpbmVyewogICAgICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgfQogICAgfQp9Ci5jaXJjbGUtYmcgewogICAgZmlsbDp1cmwoI3JhZGlhbCkKfQouZmlzaGV5ZS1iZz5jaXJjbGUgewogICAgZmlsbDogIzRmNjU5YjsKICAgIG9wYWNpdHk6IC4zOwp9Ci5hcmMtbm9uZSB7CiAgICBkaXNwbGF5OiBub25lOwp9Cg=="},{"version":3,"sources":["force.vue"],"names":[],"mappingskfile":"force.vue","sourceRoot":"src/page/information/components","sourcesContent":["<template>\n    <div class=\"forceCom\">\n        <div class=\"forceCom-left\">\n            <div class=\"filter\">\n                <Section title=\"筛选条件\">\n                    <div\n                        v-for=\"item in filterCondition\"\n                        class=\"filter-item\"\n                        :key=\"item.name\"\n                    >\n                        <span class=\"filter-item-name\">{{item.name}}</span>：\n                        <span class=\"filter-item-value\">{{item.value}}</span>\n                    </div>\n                </Section>\n            </div>\n            <div class=\"legend\">\n                <div class=\"legend-item\">\n                    <div class=\"legend-item-icon\">\n                        <div class=\"legend-link min\"></div>\n                    </div>\n                    <div class=\"legend-item-desc\">病例关系</div>\n                </div>\n                <div class=\"legend-item\">\n                    <div class=\"legend-item-icon\">\n                        <div class=\"legend-circle min\">0</div>\n                    </div>\n                    <div class=\"legend-item-desc\">病例个体，点击选择</div>\n                </div>\n                <div class=\"legend-item\">\n                    <div class=\"legend-item-icon\">\n                        <div class=\"legend-pointer\"></div>\n                    </div>\n                    <div class=\"legend-item-desc\">指针，可拨动</div>\n                </div>\n                <div class=\"legend-item\">\n                    <div class=\"legend-item-icon\">\n                        <div class=\"legend-filter-one min\">条件</div>\n                    </div>\n                    <div class=\"legend-item-desc\">一级筛选条件，点击选择</div>\n                </div>\n                <div class=\"legend-item\">\n                    <div class=\"legend-item-icon\">\n                        <div class=\"legend-time min\"></div>\n                    </div>\n                    <div class=\"legend-item-desc\">二级筛选条件(确诊时间)，拨动指针选择</div>\n                </div>\n                <div class=\"legend-item\">\n                    <div class=\"legend-item-icon\">\n                        <div class=\"legend-filter-two min\">条件</div>\n                    </div>\n                    <div class=\"legend-item-desc\">二级筛选条件(其他)，点击选择</div>\n                </div>\n            </div>\n        </div>\n        <div id=\"chart\" ref='chart'></div>\n        <div class=\"info\">\n            <Section title=\"病例信息\" class=\"infoData\">\n                <div v-if=\"caseDetail.length\"\n                    class=\"info-container\"\n                >\n                    <div\n                        v-for=\"item in caseDetail\"\n                        :key=\"item.key\"\n                        class=\"info-item\"\n                    >\n                    <span class=\"info-item-key\">{{item.key}}</span>：\n                    <span class=\"info-item-value\">{{item.value}}</span>\n                    </div>\n                </div>\n                <NoData v-else title=\"请选择病例\" />\n            </Section>\n            <Section title=\"选定病例关系\" class=\"treeData\" height=\"100%\">\n                <div class=\"tree-container\">\n                    <Tree :data=\"treeData\" />\n                </div>\n            </Section>\n        </div>\n    </div>\n    \n</template>\n\n<script>\n    import * as d3 from 'd3'\n    import * as d3Fisheye from 'd3-fisheye'\n    import _ from 'lodash'\n    import TrackJSON from '@/data/track'\n    import province from '@/data/province'\n    // import Bar from './bar'\n    import Tree from './tree'\n    import Section from '@/components/section'\n    import NoData from '@/components/noData'\n    import { initData, calculateNodeAndLink } from '../methods/dataProcessor'\n\n    export default {\n        name: 'Force',\n        components: {\n            Section,\n            // Bar,\n            NoData,\n            Tree,\n        },\n        data() {\n            initData();\n            const fisheyeRadius = 80;\n            const timeRange = d3.extent(TrackJSON, d => {\n                return new Date(d.realDate).getTime()\n            });\n            this.TIME_RANGE = [...timeRange]\n            return {\n                treeData: [],\n                fisheyeRadius,\n                deminArr: [],\n                colorObj: {},\n                disbaled: [],\n                filterObj: {},\n                timeRange: timeRange,\n                caseDetail: [],\n                filterCondition: [],\n            }\n        },\n        methods: {\n            drag: simulation => {\n                const dragstarted = d => {\n                    if (!d3.event.active) simulation.alphaTarget(0.3).restart();\n                    d.fx = d.x;\n                    d.fy = d.y;\n                }\n                \n                const dragged = d => {\n                    d.fx = d3.event.x;\n                    d.fy = d3.event.y;\n                }\n                \n                const dragended = d => {\n                    if (!d3.event.active) simulation.alphaTarget(0);\n                    d.fx = null;\n                    d.fy = null;\n                }\n                \n                return d3.drag()\n                    .on(\"start\", dragstarted)\n                    .on(\"drag\", dragged)\n                    .on(\"end\", dragended);\n            },\n            initChart() {\n                const useLength = Math.min(this.width, this.height) \n\n                d3.select('#chart').select('svg').remove()\n                \n                this.svg = d3.select('#chart')\n                    .append(\"svg\")\n                    .attr(\"viewBox\", [0, 0, useLength, useLength])\n                    .attr('width', useLength)\n                    .attr('height', useLength)\n                    .append('g')\n                    .attr('transform', `translate(${useLength/2}, ${useLength/2})`)\n                    \n                    const gradient = d3.select('#chart>svg')\n                        .append('defs')\n                        .append('radialGradient')\n                        .attr('id', 'radial')\n\n                    gradient\n                        .append('stop')\n                        .attr('offset', '0%')\n                        .attr('style', 'stop-color: #1f468b;')\n                    gradient\n                        .append('stop')\n                        .attr('offset', '100%')\n                        .attr('style', 'stop-color: #0e2244;')\n\n                    this.svg\n                        .append('circle')\n                        .attr('cx', 0)\n                        .attr('cy', 0)\n                        .attr('r', this.forceRadius[1])\n                        .classed('circle-bg', true)\n\n                    this.svg\n                        .append('g')\n                        .classed('fisheye-bg', true)\n                        .append('circle')\n                        .attr('r', this.fisheyeRadius)\n                        .attr('fill', 'none')\n                        .attr('display', 'none')\n\n                this.selectData = TrackJSON;\n                this.initTimeCircle();\n                this.initDemiCircle();\n                this.createForce();\n\n                // 默认选中确诊时间\n                this.svg.select('g[data-sortKey=qzDate]')\n                    .dispatch('click')\n            },\n            initTimeCircle(type) {\n                const gapTimeArr = _.chain(TrackJSON)\n                    .reduce((obj, d) => {\n                        obj[d.realDate] = {\n                            name: d.realDate,\n                            value: obj[d.realDate] ? obj[d.realDate].value + 1 : 1,\n                        }\n                        return obj;\n                    }, {})\n                    .values()\n                    .orderBy(d => new Date(d.name).getTime())\n                    .value();\n\n                const oneDay = 24 * 3600 * 1000;\n                const timeArr = [];\n                gapTimeArr.forEach((d, i) => {\n                    timeArr.push(d);\n                    if(gapTimeArr[i+1]) {\n                        const timeItemArr = [d.name, gapTimeArr[i+1].name].map(d1 => new Date(d1).getTime())\n                        const timeSpace = timeItemArr[1] - timeItemArr[0] - oneDay;\n                        const dayCount = timeSpace/oneDay;\n                        for(let i = 1; i <= dayCount; i++){\n                            timeArr.push({\n                                name: new Date(timeItemArr[0] + i * oneDay).toLocaleDateString(),\n                                value: d.value\n                            })\n                        }\n                    }\n                })\n\n                const isQZDate = type === 'qzDate'\n\n                if (type && !isQZDate) {\n                    timeArr.length = 0\n                    _.chain(TrackJSON)\n                        .map(type)\n                        .countBy()\n                        .map((d, k) => ({\n                            name: k,\n                            value: d,\n                            sortkey: type,\n                        }))\n                        .orderBy('name')\n                        .forEach(d => {\n                            timeArr.push(d)\n                        })\n                        .value()\n                }\n\n                const [min, max] = d3.extent(timeArr, d => d.value);\n                const color = d3.scaleLinear()\n                    .domain([min, max / 2, max])\n                    .range(['#009688', '#ffc107', '#ff0000'])\n\n                const pie = d3.pie()\n                    .padAngle(0)\n                    .sort(null)\n                    .value(d => type && !isQZDate ? d.value : 1)\n\n                const arc = d3.arc()\n                    .innerRadius(this.timeRadius[0])\n                    .outerRadius(this.timeRadius[1]);\n\n                if(type) {\n                    pie.padAngle(0.01)\n                    // arc.cornerRadius(10)\n                }\n\n                const arcs = pie(timeArr);\n\n                this.svg.select('g.timeLine').remove()\n\n                const container = this.svg.append('g')\n                    .classed('timeLine', true);\n                \n                const _this = this\n\n                const arcG = container\n                    .selectAll('g.timelineArc')\n                    .data(arcs)\n                    .enter()\n                    .append('g')\n                    .classed('timelineArc', true)\n                    .on('click', function(d) {\n                        if (!type || isQZDate) return\n                        const { name } = d.data;\n                        const arc = d3.select(this)\n                            .select('path.normal')\n                        const arcBigger = d3.select(this)\n                            .select('path.bigger')\n\n                        if(_this.filterObj[type].includes(name)) {\n                            arc.classed('arc-none', false)\n                            arcBigger.classed('arc-none', true)\n                            _this.filterObj[type] = _this.filterObj[type].filter(d => d !== name);\n                        } else {\n                            arc.classed('arc-none', true)\n                            arcBigger.classed('arc-none', false)\n                            _this.filterObj[type].push(name);\n                        }\n                        _this.selectType();\n                    })\n\n                arcG.append('path')\n                    .attr(\"fill\", d => type && !isQZDate ?  '#116cd5' : color(d.data.value))\n                    .attr(\"d\", arc)\n                    .attr(\"stroke\", () => type ? '#aaa' : 'none')\n                    .attr('cursor', () => type ? 'pointer' : null)\n                    .classed('normal', true)\n                    .transition()\n                    .duration(300)\n                    .ease(d3.easeCubicIn)\n                    .attrTween('d',function(d){\n                        const a = d3.interpolate(d.startAngle,d.endAngle);\n                        return function(t){\n                            d.endAngle   = a(t);\n                            return arc(d);\n                        };\n                    })\n\n                const arcBigger = d3.arc()\n                    .innerRadius(this.timeRadius[0])\n                    .outerRadius(this.timeRadius[1] + 5);\n\n                arcG.append('path')\n                    .attr(\"fill\", d => type ? '#116cd5' : color(d.data.value))\n                    .attr(\"d\", arcBigger)\n                    .attr('cursor', () => type ? 'pointer' : null)\n                    .classed('bigger', true)\n                    .classed('arc-none', true)\n\n                const text = arcG.append('text')\n                    .attr(\"dy\", \"0.35em\")\n\n                text.append('path')\n                    .attr('fill', 'none')\n                    .attr('id', d => `hiddenArc${d.data.name}`)\n                    .attr('d', d => {\n                        const {startAngle, endAngle} = d;\n                        const [innerRadius, outerRadius] = this.timeRadius;\n                        const angles = [startAngle, endAngle].map(d1 => d1 - Math.PI / 2)\n                        const r = (innerRadius + outerRadius) / 2;\n                        const middleAngle = (angles[1] + angles[0]) / 2\n                        const invertDirection = middleAngle > 0 && middleAngle < Math.PI\n                        if (invertDirection) angles.reverse()\n                        const path = d3.path()\n                        path.arc(0, 0, r, angles[0], angles[1], invertDirection)\n                        return path.toString()\n                    })\n                text.append('textPath')\n                    .attr('text-anchor', 'middle')\n                    .attr('startOffset', '50%')\n                    .attr('font-size', '9px')\n                    .attr('fill', '#fff')\n                    .attr('href', d => `#hiddenArc${d.data.name}`)\n                    .text(d => d.data.name.replace('2020/', ''))\n                    .attr('display', function(d) {\n                        const { width } = this.getBoundingClientRect()\n                        const rad = d.endAngle - d.startAngle\n                        const [innerRadius] = _this.timeRadius;\n                        const calWidth =  innerRadius * rad\n                        return type && width >= calWidth ? 'none' : null\n                    });\n\n                const radius = this.timeRadius[1] + (this.deminRadius[0] - this.timeRadius[1]) / 2;\n\n                const indexScale = d3.scaleLinear()\n                        .domain([0, 1])\n                        .range([0, timeArr.length - 1]);\n\n                function dragStart(){\n                    let rad = Math.atan2(d3.event.y, d3.event.x);\n                    d3.select(this)\n                        .style('transform', () => {\n                            const x = radius * Math.cos(rad);\n                            const y = radius * Math.sin(rad);\n                            rad += Math.PI / 2;\n                            if(rad < 0)  rad = Math.PI * 2 + rad\n                            const scale = rad / (Math.PI * 2) * 360;\n                            return `translate(${x}px, ${y}px) rotate(${scale}deg)`\n                        })\n                }\n\n                const dragEnd = (index) => {\n                    let rad = Math.atan2(d3.event.y, d3.event.x);\n                    rad += Math.PI / 2;\n                    if(rad < 0)  rad = Math.PI * 2 + rad\n                    const scale = rad / (Math.PI * 2);\n                    // const timeIndex = Math.ceil(indexScale(scale));\n                    const timeIndex = parseInt(indexScale(scale));\n                    const timeItem = new Date(timeArr[timeIndex].name).getTime();\n                    // if(timeItem <= this.timeRange[0]) {\n                        // index = 0\n                    // } else if(timeItem >= this.timeRange[1]) {\n                        // index = 1;\n                    // }\n                    this.timeRange[index] = timeItem;\n                    this.selectType();\n                }\n\n                container.append('polygon')\n                    .attr('fill', 'yellow')\n                    .attr('fill', '#fff')\n                    .attr('cursor', 'pointer')\n                    .attr('points', '0,10 -8,-8 8,-8')\n                    .attr('transform', () => {\n                        return `translate(${0}, ${radius * Math.sin( - Math.PI / 2)})`\n                    })\n                    .attr('display', () => type && !isQZDate ? 'none' : null)\n                    .call(\n                        d3.drag()\n                        .on(\"drag\", dragStart)\n                    )\n\n                container.append('polygon')\n                    .attr('fill', 'red')\n                    .attr('fill', '#1778e8')\n                    .attr('cursor', 'pointer')\n                    .attr('points', '0,10 -8,-8 8,-8')\n                    .attr('transform', () => {\n                        return `translate(${0}, ${radius * Math.sin( - Math.PI / 2)})`\n                    })\n                    .attr('display', function() {\n                        return type && !isQZDate ? 'none' : null})\n                    .call(\n                        d3.drag()\n                        .on(\"drag\", dragStart)\n                        .on(\"end\",  () =>  dragEnd(1))\n                    )\n            },\n            initDemiCircle() {\n                const deminArr = [{\n                    name: '染病原因',\n                    sortkey: 'reason',\n                }, {\n                    name: '确诊时间',\n                    sortkey: 'qzDate',\n                },\n                {\n                    name: '年龄',\n                    sortkey: 'nlRange',\n                }, \n                {\n                    name: '来源地',\n                    sortkey: 'origin'\n                },\n                {\n                    name: '病例关系',\n                    sortkey: 'relation',\n                }]\n\n                deminArr.forEach(d => {\n                    this.filterObj[d.sortkey] = [];\n                })\n\n                this.deminArr = deminArr\n\n                const deminData = _.chain(deminArr)\n                    .map(d => {\n                        const key = d.sortkey;\n                        let useData = TrackJSON;\n                        if (d.name === '来源地(国外)') {\n                            useData = TrackJSON.filter(d1 => !province.includes(d1[key]))\n                        } else if(d.name === '来源地(国内)') {\n                            useData = TrackJSON.filter(d1 => province.includes(d1[key]))\n                        }\n                        const deminDetailArr = _.chain(useData)\n                            .map(key)\n                            .uniq()\n                            .map(d1 => ({\n                                name: d1,\n                                type: d.name,\n                                sortkey: key,\n                            }))\n                            .value();\n\n                        if(key === 'nlRange') {\n                            deminDetailArr.sort((a, b) => {\n                                const arr = [a, b].map(d1 => Number(d1.name.split('~')[0]));\n                                return arr[0] - arr[1];\n                            })\n                        }\n                        return deminDetailArr;\n                    })\n                    .flatten()\n                    .value()\n\n                this.forignOrigin = deminData.filter(d => d.type === \"来源地(国外)\")\n                    .map(d => d.name)\n\n                const pie = d3.pie()\n                    .padAngle(.005)\n                    .sort(null)\n                    .value(d => {\n                        if (['origin'].includes(d.sortkey)) return .8\n                        return 1\n                    })\n\n                const arc = d3.arc()\n                    // .cornerRadius(10)\n                    // .padAngle(0)\n                    .innerRadius(this.deminRadius[0])\n                    .outerRadius(this.deminRadius[1]);\n\n                const arcBigger = d3.arc()\n                    .innerRadius(this.deminRadius[0])\n                    .outerRadius(this.deminRadius[1] + 5);\n\n                const arcs = pie(deminArr);\n\n                const container = this.svg\n                    .append('g')\n                    .classed('sunBurst', true)\n\n                const _this = this\n\n                const arcG = container\n                    .selectAll('g.sunBurstArc')\n                    .data(arcs)\n                    .enter()\n                    .append('g')\n                    .classed('sunBurstArc', true)\n                    .attr('data-sortKey', d => d.data.sortkey)\n                    .on('click', function(d) {\n                        const {sortkey} = d.data;\n                        const arc = d3.select(this)\n                            .select('path.normal')\n                        const arcBigger = d3.select(this)\n                            .select('path.bigger')\n                        const arcG = d3.select(this.parentNode)\n                        if (arcBigger.classed('arc-none')) {\n                            arcG.selectAll('path.normal')\n                                .classed('arc-none', false)\n                            arcG.selectAll('path.bigger')\n                                .classed('arc-none', true)\n                            arcBigger.classed('arc-none', false)\n                            arc.classed('arc-none', true)\n                            _this.initTimeCircle(sortkey === 'qzDate' ? undefined : sortkey)\n                        } else {\n                            arcG.selectAll('path.normal')\n                                .classed('arc-none', false)\n                            arcG.selectAll('path.bigger')\n                                .classed('arc-none', true)\n                            _this.initTimeCircle()\n                        }\n                        // 重置选择的时间范围\n                        _this.timeRange = [..._this.TIME_RANGE]\n                        _this.selectType()\n                    })\n\n\n                arcG.append('path')\n                    .attr('fill', '#2f50a5')\n                    .attr(\"d\", arc)\n                    .attr('stroke','none')\n                    .classed('normal', true)\n                    .classed('arc-none', false)\n                    \n\n                arcG.append('path')\n                    .attr('fill', '#2f50a5')\n                    .attr(\"d\", arcBigger)\n                    .attr('stroke','none')\n                    .classed('bigger', true)\n                    .classed('arc-none', true)\n                    \n                \n                const text = arcG.append(\"text\")\n                    .attr(\"dy\", \"0.35em\")\n\n                text.append('path')\n                    .attr('fill', 'none')\n                    .attr('id', d => `hiddenArc${d.data.name}_${d.data.type}`)\n                    .attr('d', d => {\n                        const {startAngle, endAngle} = d;\n                        const [innerRadius, outerRadius] = this.deminRadius;\n                        const angles = [startAngle, endAngle].map(d1 => d1 - Math.PI / 2)\n                        const r = (innerRadius + outerRadius) / 2;\n                        const middleAngle = (angles[1] + angles[0]) / 2\n                        const invertDirection = middleAngle > 0 && middleAngle < Math.PI\n                        // let invertDirection = '';\n                        // if (typeDir[d.data.type]) {\n                        //     invertDirection = typeDir[d.data.type];\n                        // } else {\n                        //     invertDirection = middleAngle > 0 && middleAngle < Math.PI\n                        //     typeDir[d.data.type] = invertDirection;\n                        // }\n                        if (invertDirection) angles.reverse()\n                        const path = d3.path()\n                        path.arc(0, 0, r, angles[0], angles[1], invertDirection)\n                        return path.toString()\n                    })\n\n                text.append('textPath')\n                    .attr('startOffset', '50%')\n                    .attr('href', d => `#hiddenArc${d.data.name}_${d.data.type}`)\n                    .text(d => d.data.name);\n\n            },\n            pythag(r, b, coord) {\n                const radius = this.forceRadius[1];\n                const hyp2 = Math.pow(radius, 2);\n                r += 5;\n                b = Math.min(radius * 2 - r, Math.max(r, b));\n                var b2 = Math.pow(\n                    (b - radius), 2\n                ),\n                a = Math.sqrt(hyp2 - b2);\n                coord = Math.max(\n                    radius - a + r,\n                    Math.min(a + radius - r, coord)\n                );\n                return coord;\n            },\n            createForce() {\n                this.simulation = d3.forceSimulation()\n                    .force(\"link\", d3.forceLink()\n                        .id(d => d.blh)\n                    )\n                    .force(\"charge\", \n                        d3.forceManyBody().strength(-20)\n                    )\n                    .force(\"x\", d3.forceX())\n                    .force(\"y\", d3.forceY())\n                    // .force('center', d3.forceCenter(0, 0))// 向心力\n                    // .force('collide',d3.forceCollide()  // 圆的碰撞力\n                    //     .radius(10)  // 根据指定的半径创建一个碰撞力。默认为 1\n                    // )\n                    // .force('r', d3.forceRadial(\n                    //         this.forceRadius[1],0,0\n                    //     ).strength(.5))\n                    .on(\"tick\", () => {\n                        d3.selectAll('.circleG')\n                            .attr('transform', d => {\n                                //  d.x = this.pythag(d.r, d.y, d.x); \n                                // d.y = this.pythag(d.r, d.x, d.y);\n                                return `translate(${d.x}, ${d.y})`\n                            });\n\n                        d3.selectAll('.linkItem')\n                            .attr('transform', d => {\n                                return `translate(${d.source.x}, ${d.source.y})`\n                            })\n                            .select('line')\n                            .attr(\"x1\", 0)\n                            .attr(\"y1\", 0)\n                            .attr(\"x2\", d => d.target.x - d.source.x)\n                            .attr(\"y2\", d => d.target.y - d.source.y);\n                        \n                        d3.selectAll('.linkItem')\n                            .select('text')\n                            .attr('dx', d => (d.target.x - d.source.x) / 2)\n                            .attr('dy', d => (d.target.y - d.source.y) / 2)\n                    });\n\n                const fisheye = d3Fisheye.radial()\n                    .radius(this.fisheyeRadius)\n                    .distortion(2)\n                    .smoothing(0.5);\n\n                const _this = this\n\n                const forceContainer = this.svg.append('g')\n                    .classed('force', true)\n\n                this.svg.on('mousemove', function() {\n                    const mouse = d3.mouse(this);\n                    _this.simulation.stop()\n                    fisheye.focus(mouse);\n                    d3.selectAll('.circleG').each(d => {\n                            d.fisheye = fisheye([d.x, d.y]);\n                        })\n                        .attr('transform', d => `translate(${d.fisheye[0]}, ${d.fisheye[1]})`)\n                        .attr('opacity', d => d.fisheye[2] === 1 ? '.2' : '1')\n                        \n                    d3.selectAll('.circleG')\n                        .select('circle')\n                        .attr('r', d => {\n                            const r = d.fisheye[2] * d.r;\n                            if(r>12) {\n                                return 12;\n                            }\n                            return r\n                        });\n\n                    d3.selectAll('.circleG')\n                        .select('text')\n                        .attr('font-size', d => {\n                            const r =  d.fisheye[2] * 5;\n                            if(r>9) {\n                                return 9;\n                            }\n                            return r\n                        });\n\n                    d3.selectAll('.linkItem')\n                        .attr('transform', d => {\n                            return `translate(${d.source.fisheye[0]}, ${d.source.fisheye[1]})`\n                        })\n                        .select('line')\n                        .attr(\"x1\", 0)\n                        .attr(\"y1\", 0)\n                        .attr(\"x2\", d => d.target.fisheye[0] - d.source.fisheye[0])\n                        .attr(\"y2\", d => d.target.fisheye[1] - d.source.fisheye[1])\n                        .attr('opacity', d => (d.target.fisheye[2] === 1 || d.source.fisheye[2] === 1) ? '.2' : '1')\n\n                    d3.selectAll('.linkItem')\n                        .select('text')\n                        .attr('font-size', d => d.source.fisheye[2] * 5)\n                        .attr('dx', d => (d.target.fisheye[0] - d.source.fisheye[0]) / 2)\n                        .attr('dy', d => (d.target.fisheye[1] - d.source.fisheye[1]) / 2)\n                        .attr('transform', d => {\n                            const { atan, abs, PI} = Math\n                            const [x1, y1] = d.source.fisheye\n                            const [x2, y2] = d.target.fisheye\n                            const x = abs(x2 - x1)\n                            const y = abs(y2 - y1)\n                            const rad = atan(y / x)\n                            const ang = 180 / PI * rad\n                            return `rotate(${ang}, ${(x2 - x1) / 2}, ${(y2 - y1) / 2})`\n                        })\n                        .attr('display', d => d.target.fisheye[2] === 1 ? 'none' : null)\n\n                    const mouseR = Math.sqrt(mouse.reduce((c, d) => c + Math.pow(d, 2), 0))\n                    \n                    // 鱼眼背景\n                    const fisheyeBg = d3.select('.fisheye-bg>circle')\n                            .attr('cx', mouse[0])\n                            .attr('cy', mouse[1])\n                            .attr('display', null)\n\n                    // 鼠标移出后移除效果\n                    if (mouseR > (_this.forceRadius[1])) {\n                        fisheyeBg.attr('display', 'none')\n                        _this.simulation.restart();\n\n                        d3.selectAll('.circleG')\n                            .attr('transform', d => `translate(${d.x}, ${d.y})`)\n                            .attr('opacity', 1)\n\n                        d3.selectAll('.circleG')\n                            .select('circle')\n                            .attr('r', d => d.r);\n\n                        d3.selectAll('.circleG')\n                            .select('text')\n                            .attr('font-size', 5);\n\n                        d3.selectAll('.linkItem')\n                            .attr('transform', d => `translate(${d.source.x}, ${d.source.y})`)\n                            .select('line')\n                            .attr('opacity', 1)\n                            .attr(\"x1\", 0)\n                            .attr(\"y1\", 0)\n                            .attr(\"x2\", d => d.target.x - d.source.x)\n                            .attr(\"y2\", d => d.target.y - d.source.y)\n                        \n                        d3.selectAll('.linkItem')\n                            .select('text')\n                            .attr('font-size', 5)\n                    }\n                })\n\n                this.linkContainer = forceContainer.append('g').classed('links', true);\n                this.nodeContainer = forceContainer.append('g').classed('nodes', true);\n            },\n            draw() {\n                this.treeData = [];\n                this.calcualteDetailInfo();\n                this.calcualteDetailInfo(-1);\n                const [nodes, links] = calculateNodeAndLink(this.selectData);\n\n                this.simulation.nodes(nodes);\n                this.simulation.force(\"link\").links(links);\n\n                const linkUpdate = this.linkContainer\n                    .selectAll(\".linkItem\")\n                    .data(links, d => `${d.source.blh}_${d.target.blh}`);\n                \n                const linkG = linkUpdate.enter()\n                    .append('g')\n                    .classed('linkItem', true);\n\n                linkG.append(\"line\")\n\n                linkG.append('text')\n                    .attr('font-size', 5)\n                    .attr('x', 0)\n                    .attr('y', 0)\n                    .attr('dx', d => (d.target.x - d.source.x) / 2)\n                    .attr('dy', d => (d.target.y - d.source.y) / 2)\n                    .attr('display', 'none')\n                    .text(d => {\n                        let showText = d.target.blh;\n                        if(d.target.yqtblgx) {\n                            const blharr = d.target.yqtblgx.match(/(\\d+、?)+/g)[0];\n                            showText = d.target.yqtblgx.split(blharr)[1];\n                        }\n                        return showText\n                    })\n\n                linkUpdate.exit().remove();\n\n                const nodeUpdate = this.nodeContainer\n                    .selectAll(\".circleG\")\n                    .data(nodes, d => d.blh)\n\n                nodeUpdate.select('circle')\n                        .attr('r', d => d.r)\n\n                const newAddNode = nodeUpdate.enter()\n                    .append('g')\n                    .classed('circleG', true)\n                    .attr('cursor', 'pointer')\n                    .on('click', d => {\n                        const relationArr = links.reduce((arr, d1) => {\n                            if(d1.source.blh === d.blh) {\n                                arr.push(d1.target)\n                            } else if( d1.target.blh === d.blh ){\n                                arr.push(d1.source)\n                            }\n                            return arr;\n                        }, [])\n                        var obj = {\n                            name: d.blh,\n                            children: [],\n                        }\n                        relationArr.forEach(d => {\n                            const blharr = d.yqtblgx.match(/(\\d+、?)+/g)[0];\n                            const showText = d.yqtblgx.split(blharr)[1];\n                            obj.children.push({\n                                name: `${d.blh}(${showText})`,\n                            })\n                        })\n                        this.treeData = obj;\n                        this.calcualteDetailInfo(d)\n                    })\n                    .call(this.drag(this.simulation))\n                    .on('mouseout', function() {\n                        d3.event.preventDefault()\n                        d3.event.stopImmediatePropagation()\n                        return false\n                    })\n\n                newAddNode.append(\"circle\")\n                    .attr('r', d => d.r)\n\n                newAddNode.append(\"text\")\n                    .attr('font-size', 5)\n                    .text(d => {\n                        let showText = d.blh;\n                        return showText\n                    })\n\n                nodeUpdate.exit().remove();\n                    \n                this.simulation.alpha(.3)\n                    .alphaTarget(0)\n                    .restart();\n            },\n            selectType() {\n                console.log(this.timeRange.map(d => new Date(d).toLocaleDateString()));\n                this.selectData = TrackJSON.filter(d => {\n                    let isKeep = true;\n                    Object.keys(this.filterObj)\n                        .filter(key => this.filterObj[key].length > 0)\n                        .forEach(key => {\n                            isKeep && (isKeep = this.filterObj[key].includes(d[key]))\n                        })\n                    return isKeep;\n                }).filter(d => {\n                    const timeStap = new Date(d.realDate).getTime();\n                    return timeStap >= this.timeRange[0] && timeStap <= this.timeRange[1];\n                });\n                const strengthScale = d3.scaleLinear().domain([TrackJSON.length, 0]).range([18, 40])\n                const forceCount = strengthScale(this.selectData.length);\n                this.simulation.force(\"charge\", \n                    d3.forceManyBody().strength(-forceCount)\n                )\n                this.draw();\n            },\n            calcualteData() {\n                const height = this.$refs.chart.offsetHeight;\n                const width = this.$refs.chart.offsetWidth;\n                const radius = Math.min(height, width) / 2;\n                this.width = width;\n                this.height = height;\n                this.forceRadius = [0, radius - 70];\n                this.timeRadius = [radius - 70, radius - 50] ;\n                this.deminRadius = [radius - 30, radius - 10];\n            },\n            calcualteDetailInfo(d) {\n                let info = [];\n                if(d) {\n                    const include = ['blh','xb', 'nl',  'bk', 'fbrq', 'rysj', 'rbyy', 'bzzzytjd'];\n                    const descObj = {\n                        \"yqtblgx\": \"与其他病例关系\",\n                        \"zwhsjqj\": \"在武汉时间\",\n                        \"rbyy\": \"染病原因\",\n                        \"bzzzytjd\": \"备注\",\n                        \"bk\": \"病况\",\n                        \"xb\": \"性别\",\n                        \"rysj\": \"入院时间\",\n                        \"lssj\": \"来深时间\",\n                        \"fbingsj\": \"发病时间\",\n                        \"fbrq\": \"确诊日期\",\n                        \"jzd\": \"居住地\",\n                        \"fbusj\": \"发布时间\",\n                        \"nl\": \"年龄\",\n                        \"blh\": \"病例号\",\n                        \"nationality&native\":\"国籍和籍贯（国内有籍贯者记录籍贯）\",\n                        \"track\":\"途径地\",\n                        \"track_time\":\"途径地的时间\",\n                        \"track_trans\":\"途径交通工具\",\n                        \"treatment_hospital\":\"救治医院\"\n                    }\n                    include.forEach(d1 => {\n                        info.push({\n                            key: descObj[d1],\n                            value: d === -1 ? '' : d[d1] || '暂无',\n                        })\n                    })\n                    this.caseDetail = info\n                } else {\n                    const filterArr = [];\n                    const deminArr = this.deminArr.map(d => ({\n                        name: d.name,\n                        sortkey: d.name === '来源地(国外)' ? 'forignOrigin' : d.sortkey,\n                    }))\n\n                    const dateRange = this.timeRange.join('~') === this.TIME_RANGE.join('~')\n                        ? []\n                        : [this.timeRange.map(d => {\n                            const date  = new Date(d)\n                            return `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`\n                            }).join('~')]\n                    \n                    const filterObj = {\n                        ...this.filterObj,\n                        qzDate: dateRange,\n                    }\n                    \n                    _.chain(filterObj)\n                        .keys()\n                        .forIn(key => {\n                            filterArr.push({\n                                name: deminArr.find(d => d.sortkey === key).name,\n                                value: filterObj[key].join(', ') || '全部',\n                            })\n                        })\n                        .value();\n                    filterArr.push({\n                        name: '病例数量',\n                        value: this.selectData.length,\n                    })\n                    this.filterCondition = filterArr;\n                }\n            },\n            handleReset() {\n                const chartContainer = d3.select('#chart')\n                    .on('click.reset', () => {\n                        if(d3.event.target === chartContainer\n                            || d3.event.target === chartContainer.querySelector('svg')) {\n                                this.timeRange = d3.extent(TrackJSON, d => {\n                                    return new Date(d.realDate).getTime()\n                                });\n                                this.initChart()\n                                this.selectType();\n                            }\n                    })\n                    .node()\n            },\n        },\n        mounted() {\n            this.calcualteData()\n            this.initChart();\n            this.selectType();\n            this.handleReset()\n        }\n    }\n</script>\n\n<style lang=\"less\">\n    .forceCom{\n        display: flex;\n        padding-top: 20px;\n        align-items: center;\n        height: 100%;\n        position: relative;\n    }\n    .forceCom-left {\n        display: flex;\n        justify-content: space-between;\n        flex-direction: column;\n        height: 100%;\n        width: 20%;\n    }\n    .filter {\n        width: 100%;\n        font-size: 14px;\n        .section {\n            width: 100%;\n            padding-bottom: 10px;\n            .section-body {\n                min-height: 150px;\n                width: 100%;\n                line-height: 2.5em;\n                display: flex;\n                justify-content: center;\n                flex-direction: column;\n            }\n        }\n        .filter-item {\n            width: 100%;\n            display: flex;\n            .filter-item-name{\n                text-align: right;\n                width: 80px;\n                font-size: 14px;\n            }\n            .filter-item-value{\n                flex: 1;\n            }\n        }\n    }\n    #chart{\n        width: 50%;\n        height: 100%;\n        min-width: 700px;\n        min-height: 700px;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n    }\n    .legend{\n        .legend-item{\n            display: flex;\n            align-items: center;\n            margin-top: 10px;\n            .legend-item-icon{\n                width: 40px;\n                text-align: center;\n                &>div{\n                    display: inline-block;\n                }\n                .legend-circle{\n                    height: 22px;\n                    width: 22px;\n                    line-height: 22px;\n                    text-align: center;\n                    border-radius: 40px;\n                    font-size: 12px;\n                    color: #fff;\n                    background: rgba(255, 0, 0, 0.45);\n                    border: solid 1px rgba(255, 255, 255, 0.5);\n                }\n                .legend-link{\n                    margin-bottom:3px;\n                    height: 1px;\n                    width: 40px;\n                    background: rgba(255, 0, 0, 0.45);\n                }\n                .legend-pointer{\n                    width: 0;\n                    height: 0;\n                    border: 8px solid transparent;\n                    border-top: 14px solid #1778e8;\n                    transform: translateY(6px);\n                }\n                .legend-time{\n                    height: 20px;\n                    width: 40px;\n                    background: linear-gradient(to right, #009688, #ffc107, #ff0000);\n                }\n                .min {\n                    transform: scale(.8)\n                }\n                .legend-filter-one{\n                    height: 20px;\n                    width: 40px;\n                    background: #2f50a5;   \n                }\n                .legend-filter-two{\n                    height: 20px;\n                    width: 40px;\n                    background: #116cd5;\n                    border: solid 1px #aaa;\n                }\n            }\n            .legend-item-desc{\n                margin-left: 10px;\n            }\n        }\n    }\n    .force{\n        circle {\n            stroke: #fff;\n            stroke: rgba(255, 255, 255, 0.5);\n            stroke-width: 1;\n            fill: #bf5658;\n            fill: rgba(255, 0, 0, 0.45);\n            cursor: pointer;\n        }\n        text{\n            fill: #fff;\n            text-anchor: middle;\n        }\n        .linkItem{\n            stroke: rgba(255, 0, 0, 0.45);\n            stroke-width: 1;\n            text{\n                stroke: #fff;\n                stroke-width: .2;\n            }\n        }\n    }\n\n    .timeLine {\n        .timelineArc {\n            transition: .3s;\n        }\n    }\n\n    .sunBurst {\n        .sunBurstArc {\n            transition: .3s;\n            &>path {\n                cursor: pointer;\n            }\n            &>text {\n                pointer-events: none;\n                text-anchor: middle;\n                user-select: none;\n                fill: #fff;\n            }\n        }\n    }\n\n    .info {\n        height: 100%;\n        flex: 1;\n        display: flex;\n        margin-left: 30px;\n        flex-direction: column;\n        justify-content: space-between;\n        .infoData{\n            height: 50%;\n        }\n        .info-container{\n            min-height: 200px;\n            display: flex;\n            height: 100%;\n            flex-direction: column;\n            justify-content: space-around;\n        }\n        .info-item{\n            height: 50%;\n            line-height: 30px;\n            display: flex;\n            .info-item-key{\n                display: inline-block;\n                width: 100px;\n                font-weight: bolder;\n                font-size: 14px;\n                text-align: right;\n            }\n            .info-item-value{\n                flex: 1;\n                white-space: pre-wrap;\n            }\n        }\n        .treeData {\n            height: 50%;\n            margin-bottom: 0;\n            .tree-container{\n                height: 100%;\n            }\n        }\n    }\n    .circle-bg {\n        fill:url(#radial)\n    }\n    .fisheye-bg>circle {\n        fill: #4f659b;\n        opacity: .3;\n    }\n    .arc-none {\n        display: none;\n    }\n</style>"]}]}