{"remainingRequest":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/ranking/components/map.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/src/page/ranking/components/map.vue","mtime":1618628490000},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/babel-loader/lib/index.js","mtime":1617788517170},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/cache-loader/dist/cjs.js","mtime":1617788517390},{"path":"/home/yujiahao/Downloads/visual_work/SZ-COVID-19/node_modules/vue-loader/lib/index.js","mtime":1617788568833}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmfile":"map.vue","sourceRoot":"src/page/ranking/components","sourcesContent":["<template>\n    <div class=\"lines-map-container\">\n        <div class=\"map-tool\">\n            <el-switch\n                v-model=\"isAll\"\n                active-text=\"男\"\n                inactive-text=\"女\"\n                inactive-color=\"#b2d4f3\"\n                @change=\"handleAllChange\"\n            />\n        </div>\n        <div class=\"map-title\">{{currentDate}}</div>\n        <div id=\"trackMap\">\n\n        </div>\n    </div>\n</template>\n\n<script>\n    import eventBus from '../eventBus';\n    import _ from 'lodash';\n    import { extent } from 'd3'\n    import echarts from 'echarts/lib/echarts';\n    import 'echarts/lib/component/geo'\n    import 'echarts/map/js/world.js';\n    import StationGeo from '@/data/station'\n    import TrackJSON from '@/data/track'\n    import CountryMappingJSON from '@/data/countryMapping'\n    import CountryI18n from '@/data/countryI18n'\n\n    const PERIOD = 2;\n\n    const DEFAULT_CENTER = [114.279, 30]\n\n    const DEFAULT_ZOOM = 9\n\n    export default {\n        name: 'Map',\n        data() {\n            return {\n                isAll: true,\n                currentDate: '',\n            }\n        },\n        methods: {\n            initMap() {\n                const series = this.initSeries();\n                const {options, timelineData} = this.initOptions()\n                var option = {\n                    baseOption: {\n                        timeline: {\n                            currentIndex: this.timelineIndex || 0,\n                            orient: 'vertical',\n                            top: '20',\n                            left: '90%',\n                            right: '20',\n                            bottom: '10',\n                            axisType: 'category',\n                            symbol: 'rect',\n                            symbolSize: [10, 6],\n                            itemStyle: {\n                                color: '#152a68',\n                            },\n                            checkpointStyle: {\n                                symbol: 'roundRect',\n                                color: '#3c8af1',\n                                symbolSize: [10, 6],\n                                borderWidth: 0,\n                            },\n                            controlStyle: {\n                                itemSize: 15,\n                            },\n                            emphasis: {\n                                itemStyle: {\n                                    color: '#3c8af1',\n                                },\n                                label: {\n                                    color: '#3c8af1',\n                                },\n                                controlStyle: {\n                                    color: '#3c8af1',\n                                    borderColor: '3c8af1',\n                                    borderWidth: 2,\n                                },\n                            },\n                            label: {\n                                position: 10,\n                                interval: 1,\n                                color: '#aaa',\n                                fontSize: 10,\n                                formatter: value => {\n                                    const date = new Date(value)\n                                    return [date.getFullYear(),\n                                        date.getMonth() + 1,\n                                        date.getDate()]\n                                            .join('-')\n                                }\n                            },\n                            loop: true,\n                            autoPlay: true,\n                            playInterval: PERIOD * 1000,\n                            data: timelineData\n                        },\n                        tooltip: {\n                            trigger: 'item',\n                            backgroundColor: 'rgba(166, 200, 76, 0.82)',\n                            borderColor: '#FFFFCC',\n                            showDelay: 0,\n                            hideDelay: 0,\n                            enterable: true,\n                            transitionDuration: 0,\n                            extraCssText: 'z-index:100',\n                        },\n                        visualMap: [\n                        {\n                            id: 'heatmap',\n                            show: true,\n                            seriesIndex: 5,\n                            min: 0,\n                            max: 10000,\n                            left: 10,\n                            itemGap: 4,\n                            itemSymbol: 'circle',\n                            textStyle: {\n                                color: '#aaa',\n                            },\n                            pieces: [{\n                                gt: 10000,\n                                label: \"> 10000 人\",\n                                color: \"rgba(57, 111, 255)\"\n                            }, {\n                                gte: 5000,\n                                lte: 10000,\n                                label: \"5000 - 10000 人\",\n                                color: \"rgba(50, 97, 222)\"\n                            }, {\n                                gte: 200,\n                                lt: 5000,\n                                label: \"200 - 5000 人\",\n                                color: \"rgba(42, 82, 189)\"\n                            }, {\n                                gt: 0,\n                                lt: 200,\n                                label: \"0 - 200人\",\n                                color: \"rgba(35, 68, 156)\"\n                            }, {\n                                value: 0,\n                                color: \"rgba(51, 69, 89, .5)\"\n                            }],\n                        }],\n                        geo: {\n                            map: 'world',\n                            zoom: DEFAULT_ZOOM,\n                            center: DEFAULT_CENTER,\n                            label: {\n                                emphasis: {\n                                    show: false\n                                }\n                            },\n                            scaleLimit: {\n                                min: 1,\n                                max: 12\n                            },\n                            roam: true, //是否允许缩放\n                            itemStyle: {\n                                normal: {\n                                    color: 'rgba(51, 69, 89, .5)', //地图背景色\n                                    borderColor: '#516a89', //省市边界线00fcff 516a89\n                                    borderWidth: 1\n                                },\n                                emphasis: {\n                                    color: 'rgba(51, 69, 89, .5)' //悬浮背景\n                                }\n                            }\n                        },\n                        series: series\n                    },\n                    options,\n                };\n                this.myChart.setOption(option, true);\n            },\n            initHeatData() {\n                return fetch('d/format_timeseries.json')\n                    .then(res => res.json())\n                    .then(res => {\n                        this.heatData = _.pickBy(res, (d, k) => CountryMappingJSON[k])\n                    })\n            },\n            initData() {\n                const trackObj = _.chain(TrackJSON)\n                    .filter(d => d.track.length > 0)\n                    .map(d => {\n                        const { track, blh } = d;\n                        const startstation = track[0];\n                        const endstation = track[track.length - 1];\n                        const trackItem = [{\n                            name: startstation.from,\n                            time: startstation.time,\n                            value: 1,\n                            coord: StationGeo[startstation.from],\n                        }, {\n                            name: endstation.to,\n                            time: endstation.time,\n                            value: 1,\n                            coord: StationGeo[endstation.to],\n                        }]\n                        return {\n                            blh,\n                            track: trackItem,\n                        }\n                    })\n                    .reduce((o, d) => {\n                        const key = d.track[1].time\n                        if (o[key]) {\n                            o[key].push(d)\n                        } else {\n                            o[key] = [d]\n                        }\n                        return o\n                    }, {})\n                    .pickBy('length')\n                    .value()\n                return trackObj;\n            },\n            getScatterData(data) {\n                return _.chain(data)\n                    .flattenDeep()\n                    .reduce((obj, d) => {\n                        if(d.name === '深圳') return obj;\n                        if (!obj[d.name]) {\n                            obj[d.name] = {\n                                name: d.name,\n                                value: d.coord.concat(0),\n                            }\n                        }\n                        obj[d.name].value[2] += 1\n                        return obj;\n                    }, {})\n                    .values()\n                    .value();\n            },\n            getHeatData(date) {\n                return _.chain(this.heatData)\n                    .map((arr, k) => {\n                        const findItem = arr.find(d1 => d1.date === date) || {}\n                        return {\n                            name: CountryMappingJSON[k],\n                            value: findItem.exist || 0\n                        }\n                    })\n                    .value()\n            },\n            initOptions() {\n                const timeTrack = this.initData()\n                this.timeTrack = timeTrack\n                const options = _.chain(timeTrack)\n                    .orderBy(d => new Date(d[0].track[1].time).getTime())\n                    .map((d, i, arr) => {\n                        const trackData = d.map(d1 => d1.track)\n                        const addTrackData = this.isAll\n                        ? _.chain(arr)\n                            .slice(0, i + 1)\n                            .flatten()\n                            .map(d1 => d1.track)\n                            .value()\n                        : []\n                        const scatterData = this.getScatterData(trackData)\n                        const addScatterData = this.getScatterData(addTrackData)\n                        \n                        const newDate = new Date(d[0].track[1].time)\n                        const currentDate = `${newDate.getFullYear()}-${\n                            newDate.getMonth() + 1}-${newDate.getDate()}`\n                        const heatData = this.getHeatData(currentDate)\n                        return {\n                            series: [{\n                                data: trackData,\n                            },\n                            {\n                                data: scatterData,\n                            },\n                            {\n                                data: addTrackData,\n                            },\n                            {\n                                data: addScatterData\n                            },\n                            {},\n                            {\n                                data: heatData\n                            }]\n                        }\n                    })\n                    .value()\n\n                const timelineData = _.chain(timeTrack)\n                    .keys()\n                    .orderBy(d => new Date(d).getTime())\n                    .value()\n                return {options, timelineData}\n            },\n            calculateRadius(d) {\n                if(d[2] >= 10) {\n                    return 10\n                } else if(d[2]<=4){\n                    return 4;\n                }\n                return d[2] \n            },\n            initSeries() {\n                const series = [];\n                series.push(\n                    {\n                        type: \"lines\",\n                        zlevel: 2,\n                        effect: {\n                            show: true,\n                            period: PERIOD - .5, //箭头指向速度，值越小速度越快\n                            trailLength: 0.02, //特效尾迹长度[0,1]值越大，尾迹越长重\n                            symbol: \"arrow\", //箭头图标\n                            symbolSize: 5, //图标大小\n                            loop: false,\n                        },\n                        lineStyle: {\n                            width: 1, //尾迹线条宽度\n                            opacity: 0.4, //尾迹线条透明度\n                            curveness: 0.3, //尾迹线条曲直度\n                            color: '#fe7335',\n                        },\n                    },\n                    {\n                        type: 'effectScatter',\n                        coordinateSystem: 'geo',\n                        zlevel: 1,\n                        rippleEffect: { //涟漪特效\n                            period: 4, //动画时间，值越小速度越快\n                            brushType: 'stroke', //波纹绘制方式 stroke, fill\n                            scale: 4 //波纹圆环最大限制，值越大波纹越大\n                        },\n                        label: {\n                            normal: {\n                                show: true,\n                                position: 'right', //显示位置\n                                offset: [5, 0], //偏移设置\n                                formatter: function(params){//圆环显示文字\n                                    return params.data.name;\n                                },\n                                fontSize: 10\n                            },\n                            emphasis: {\n                                show: true\n                            }\n                        },\n                        symbol: 'circle',\n                        symbolSize: d => this.calculateRadius(d),\n                        itemStyle: {\n                            color: '#fe7335',\n                        },\n                    },\n                    {\n                        id: 'allLines',\n                        type: \"lines\",\n                        zlevel: 2,\n                        lineStyle: {\n                            color: '#fe7335',\n                            width: 1, //尾迹线条宽度\n                            opacity: 0.8, //尾迹线条透明度\n                            curveness: 0.3 //尾迹线条曲直度\n                        },\n                        animation: false,\n                    },\n                    {\n                        id: 'addScatter',\n                        type: 'scatter',\n                        coordinateSystem: 'geo',\n                        zlevel: 1,\n                        label: {\n                            show: false,\n                        },\n                        symbol: 'circle',\n                        symbolSize: d => this.calculateRadius(d),\n                        itemStyle: {\n                            color: '#fe7335',\n                            opacity: .8,\n                        },\n                        animation: false,\n                    },\n                    {\n                        type: 'scatter',\n                        coordinateSystem: 'geo',\n                        zlevel: 2,\n                        rippleEffect: {\n                            period: 4,\n                            brushType: 'stroke',\n                            scale: 4\n                        },\n                        label: {\n                            normal: {\n                                show: true,\n                                position: 'right',\n                                //offset:[5, 0],\n                                color: '#1cf3e8',\n                                formatter: '{b}',\n                                textStyle: {\n                                    color: \"#1cf3e8\"\n                                }\n                            },\n                            emphasis: {\n                                show: true,\n                                color: \"#f60\"\n                            }\n                        },\n                        symbol: 'pin',\n                        symbolSize: 20,\n                        z: 10,\n                        data: [{\n                            name: '深圳',\n                            value: StationGeo['深圳'].concat([10]),\n                        }],\n                    },\n                    {\n                        type: 'map',\n                        geoIndex: 0,\n                        tooltip: {\n                            show: true,\n                            formatter: ({data}) => {\n                                const name = CountryI18n[data.name] ? CountryI18n[data.name] : data.name\n                                const value = isNaN(data.value) || !data.value ? 0 : data.value\n                                let str = `${this.currentDate}<br/>${name}: ${value}  例`\n                                if (!data.name) str = null\n                                return str\n                            }\n                        },\n                    }\n                );\n                return series;\n            },\n            hanleTimelinechanged() {\n                this.updateDate(0)\n                this.myChart.on('timelinechanged', ({ currentIndex }) => {\n                    this.timelineIndex = currentIndex\n                    const { series } = this.myChart.getOption()\n                    const seriesIndex = this.isAll ? 3 : 1\n                    const geoArr = _.chain(series[seriesIndex].data)\n                        .map(d => d.value.slice(0, 2))\n                        .value()\n                    geoArr.push(StationGeo[\"深圳\"])\n                    const lngExtent = extent(geoArr, d => +d[0]).map((d, i) => +d + (i === 0 ? (-1) : 1))\n                    const latExtent = extent(geoArr, d => +d[1]).map((d, i) => +d + (i === 0 ? (-10) : 10))\n\n                    const lngCenter = Number.isNaN(lngExtent[0]) ? DEFAULT_CENTER[0] : (lngExtent[0] + lngExtent[1]) / 2\n                    const latCenter = Number.isNaN(latExtent[0]) ? DEFAULT_CENTER[1] : (latExtent[0] + latExtent[1]) / 2\n                    const center = [lngCenter, latCenter]\n                    const zoom = Number.isNaN(lngExtent[0]) ? DEFAULT_ZOOM\n                        : _.min([1 / ((lngExtent[1] - lngExtent[0]) / 360), 1 / ((latExtent[1] - latExtent[0]) / 180)])\n\n                    const heatExtent = extent(series[5].data, d => d.value)\n                    this.myChart.setOption({\n                        geo: {\n                            zoom,\n                            center,\n                        },\n                        visualMap: {\n                            id: 'heatmap',\n                            min: heatExtent[0] + 1,\n                            max: heatExtent[1] + heatExtent[1] * .2\n                        },\n                        series: {\n                            id: 'allLines',\n                            lineStyle: {\n                                opacity: '.2',\n                            },\n                        }\n                    }, this)\n\n                    this.updateDate(currentIndex)\n                })\n            },\n            updateDate(index) {\n                const timeArr = _.chain(this.timeTrack)\n                    .map((d, k) => ({\n                        date: k,\n                        time: new Date(k).getTime(),\n                    }))\n                    .orderBy('time')\n                    .map('date')\n                    .value()\n                eventBus.$emit('trackMapTime', {\n                    date: timeArr[index],\n                    isAdd: this.isAll,\n                })\n                this.currentDate = timeArr[index]\n            },\n            handleAllChange() {\n                this.initMap()\n            },\n        },\n        mounted() {\n            this.initHeatData().then(() => {\n                this.myChart = echarts.init(document.getElementById('trackMap'), 'light');\n                this.initMap()\n                this.hanleTimelinechanged()\n            })\n        },\n        beforeDestroy() {\n            this.myChart.dispose()\n        }\n    }\n</script>\n\n<style lang=\"less\">\n   .el-switch__label{\n        color: #aaa;\n    }\n    .lines-map-container {\n        position: relative;\n        padding: 0;\n        margin: 0;\n        width: 100%;\n        .map-tool {\n            position: absolute;\n            top: 5px;\n            z-index: 2;\n            transform: scale(.8);\n        }\n        .map-title {\n            position: absolute;\n            top: 10px;\n            right: 100px;\n            z-index: 2;\n            color: white;\n            font-size: 32px;\n            text-shadow: 3px 3px black, -2px -2px black, 2px -2px black,\n        }\n        #trackMap{\n            width: 100%;\n            height: 100%;\n        }\n    }\n</style>"]}]}